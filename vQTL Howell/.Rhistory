tail(unique(org$`Loan Sequence Number`))
tail(unique(perf$`Sequence Number`))
?diff
diff(q)
diff(org$`Loan Sequence Number`)
unique(org$`Loan Purpose`)
unique(org$`Loan Sequence Number`)
as.character(unique(org$`Loan Sequence Number`))
os = as.character(unique(org$`Loan Sequence Number`))
ps = as.character(unique(perf$`Sequence Number`))
ps[-os]
os
length(ps[1])
nchar(ps[1])
sapply(ps, function(x){
return(substr(x,6,12))
})
osn =sapply(ps, function(x){
return(substr(x,6,12))
})
osn =sapply(os, function(x){
return(substr(x,6,12))
})
psn = sapply(ps, function(x){
return(substr(x,6,12))
})
osn
class(osn)
str(os)
str(osn)
as.numeric(osn)
osn = as.numeric(osn); psn = as.numeric(psn)
hist(osn)
hist(psn)
hist(osn)
hist(psn)
hist(osn)
hist(psn)
x = osn[1]
x
psn
mch =  which(psn == x)
mch
sapply(osn, function(x){
mch =  which(psn == x)
if(!is.null(mch){
return(NULL)
}) else return(x)
})
sapply(osn, function(x){
mch =  which(psn == x)
if(!is.null(mch)){
return(NULL)
} else return(x)
})
sapply(osn, function(x){
print(x)
mch =  which(psn == x)
if(!is.null(mch)){
return(NULL)
} else return(x)
})
beep()
dif = sapply(osn, function(x){
print(x)
mch =  which(psn == x)
if(!is.null(mch)){
return(NULL)
} else return(x)
})
sapply(diff,is.null)
a = sapply(diff,is.null)
which(a == FALSE)
length(a)
head(org$`Loan Sequence Number`)
head(perf$`Sequence Number`)
head(unique(perf$`Sequence Number`))
x = os[1]
substr(x,6,12)
x
tail(os)
x = os[length(os)]
x
substr(x,6,12)
os
ps
os
ps
os
ps
os
sets[[50000]]
length(npvs)
org$`Loan Sequence Number`[dim(org)[1]]
npvs = lapply(sets,function(x){
npv(set = x, i = (1.0293)^(1/12) - 1)
})
set
head(set)
status
classify(set)
a = classify(set)
a
setwd("C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/vQTL Howell")
dat = read.csv(file = "Heat Stress.csv")
Stress.csv")
zvals = as.character(dat[,1]
)
zvals = as.character(dat[,1])
gbs = read.table(file = "Howell_scrubbed_Z_to_SNPs.txt", header = TRUE)
gbsnames = as.character(gbs[,3])
fullnames = vector()
org  = sapply(1:length(zvals),function(x){
as.character(gbs[which(gbsnames == zvals[x]),1])
})
org = unlist(org)
ex = org[1]
cln = gregexpr(":",ex)[[1]]
bad = c(cln[1],cln[length(cln)])
rem = substr(ex)
ex
org
cross = read.cross(format = "csv", file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching BayesNet/ManchingScrubbed.csv")
library(qtl)
library(vqtl)
cross = read.cross(format = "csv", file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching BayesNet/ManchingScrubbed.csv")
?read.cross
cross = drop.nullmarkers(cross)
gc()
all(gbs[1,] == gbs[[2,]])
gbs[1,] == gbs[2,]
all(gbs[1,] == gbs[2,])
gbs[1,1]
gbs[1,2]
all(gbs[1,-1] == gbs[2,-1])
gbs[1:2,1]
gbs[7:8,1]
all(gbs[7,-1] == gbs[8,-1])
all(gbs[9,-1] == gbs[10,-1])
gbs[27:38,1]
all(gbs[27,-1] == gbs[28,-1])
gbs[37:48,1]
gbs[47:58,1]
gbs[50:51,1]
all(gbs[50,-1] == gbs[51,-1])
all(gbs[54,-1] == gbs[55,-1])
all(gbs[56,-1] == gbs[57,-1])
all(gbs[59,-1] == gbs[60,-1])
all(gbs[61,-1] == gbs[62,-1])
all(gbs[63,-1] == gbs[64,-1])
gbs[67,1]
all(gbs[67,-1] == gbs[68,-1])
all(gbs[69,-1] == gbs[70,-1])
gbs[75:90]
gbs[75:90,1]
gbs[85:86,1]
all(gbs[85,-1] == gbs[86,-1])
gbs[100:110,1]
gbs[104:105,1]
all(gbs[104,-1] == gbs[105,-1])
all(gbs[113,-1] == gbs[114,-1])
all(gbs[115,-1] == gbs[116,-1])
gbs[125:135,1]
gbs[135:145,1]
gbs[139:140,1]
all(gbs[139,-1] == gbs[140,-1])
all(gbs[145,-1] == gbs[146,-1])
cgp = calc.genoprob(cross = cross)
cross = read.cross(format = "csv", file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching BayesNet/ManchingScrubbed_GenoOnly.csv")
library(beepr)
beep()
evf = read.csv(file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching BayesNet/ManchingScrubbed_Environment.csv")
gc()
evf = read.csv(file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching BayesNet/ManchingScrubbed_Environment.csv")
colnames(evf)
scanv = scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + evf$Low.Water + evf$Low.Nitrogen + evf$Pathogen,
var.formula =  ~ var.QTL.add + evf$Low.Water + evf$Low.Nitrogen + evf$Pathogen)
beep()
?scanonevar
vqtl::scanonevar
?validate.scanonevar.input
mean.formula
formulae.is.valid.for.cross
formulae.is.valid.for.cross_
cgp$environment = v(evf$Low.Water, evf$Low.Nitrogen, evf$Pathogen)
cgp$environment = c(evf$Low.Water, evf$Low.Nitrogen, evf$Pathogen)
class(cgp$environment)
str(cgp$environment)
cgp = calc.genoprob(cross = cross)
cgp$environment$Low.Water = evf$Low.Water
cgp$environment$Low.Nitrogen = evf$Low.Nitrogen
cgp$environment$Pathogen = evf$Pathogen
scanv = scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + environment$Low.Water + evf$Low.Nitrogen + evf$Pathogen,
var.formula =  ~ var.QTL.add + evf$Low.Water + evf$Low.Nitrogen + evf$Pathogen)
scanv = scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + environment$Low.Water + environment$Low.Nitrogen + environment$Pathogen,
var.formula =  ~ var.QTL.add + environment$Low.Water + environment$Low.Nitrogen + environment$Pathogen)
scanv = scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + environment,
var.formula =  ~ var.QTL.add + environment)
debug(scanonevar)
scanv = scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + environment,
var.formula =  ~ var.QTL.add + environment)
is.mean.formula
x
mean.formula
mean.formula[[2]]
length(mean.formula)
mean.formula[[1]]
length(all.vars(mean.formula[[2]]))
is.var.formula
length(var.formula)
var.formula[[1]]
all(chrs %in% qtl::chrnames(cross))
formulae_is_valid_()
formulae_is_valid_
formulae
environment()
cgp = calc.genoprob(cross = cross)
cgp$envr$Low.Water = evf$Low.Water
cgp$envr$Low.Nitrogen = evf$Low.Nitrogen
cgp$envr$Pathogen = evf$Pathogen
scanv = scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + environment,
var.formula =  ~ var.QTL.add + environment)
scanv = scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + environment,
var.formula =  ~ var.QTL.add + environment)
family <-read.cross(dir = "~/PCR\ data/", file = "family.csv")
family <-read.cross(file = url("https://raw.githubusercontent.com/tbillman/Stapleton-Lab/master/vQTL%20Random%20and%20Family/data/tidied/Family.csv"))
family <- drop.nullmarkers(family)
family <- calc.genoprob(family)
foutv <- scanonevar(cross = family,
mean.formula = PlantHeight ~ mean.QTL.add,
var.formula = ~ var.QTL.add)
undebug(scanonevar)
foutv <- scanonevar(cross = family,
mean.formula = PlantHeight ~ mean.QTL.add,
var.formula = ~ var.QTL.add)
foutvdf<- data.frame(foutv$result$loc.name,
foutv$result$mean.lod,
foutv$result$mean.asymp.p,
foutv$result$var.lod,
foutv$result$var.asymp.p,
foutv$result$joint.lod,
foutv$result$joint.asymp.p)
colnames(foutvdf) = c("SNP Names",
"Mean LOD",
"Mean P Value",
"Variance LOD",
"Variance P Value",
"Joint LOD",
"Joint P Value")
effect.sizes = function (cross, phenotype.name, focal.groups = NULL, nuisance.groups = NULL,
genotype.names = c("AA", "AB", "BB"), xlim = NULL, ylim = NULL,
title = paste(phenotype.name, "by", paste(focal.groups,
collapse = ", ")), draw_ribbons = TRUE, se_line_size = 1,
point_size = 1)
{
indiv.mean.estim <- indiv.mean.lb <- indiv.mean.ub <- "fake_global_for_CRAN"
indiv.sd.estim <- indiv.sd.lb <- indiv.sd.ub <- "fake_global_for_CRAN"
group.mean.estim <- group.mean.ub <- group.mean.lb <- "fake_global_for_CRAN"
group.sd.estim <- group.sd.ub <- group.sd.lb <- "fake_global_for_CRAN"
modeling.df <- dplyr::data_frame(placeholder = rep(NA, qtl::nind(cross)))
modeling.df[[phenotype.name]] <- cross[["pheno"]][[phenotype.name]]
marker.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.geno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.geno(cross = cross))])
phen.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.pheno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.pheno(cross = cross))])
for (marker.name in marker.names) {
modeling.df[[marker.name]] <- factor(x = qtl::pull.geno(cross = cross)[,
marker.name], labels = genotype.names)
}
for (phen.name in phen.names) {
modeling.df[[phen.name]] <- factor(qtl::pull.pheno(cross = cross)[[phen.name]])
}
modeling.df[["placeholder"]] <- NULL
covar.form <- paste(focal.groups, collapse = "+")
if (!is.null(nuisance.groups)) {
covar.form <- paste(covar.form, "+", paste(nuisance.groups,
collapse = "+"))
}
mean.form <- paste(phenotype.name, "~", covar.form)
var.form <- paste("~", covar.form)
dglm.fit <- dglm::dglm(formula = stats::formula(mean.form),
dformula = stats::formula(var.form), data = modeling.df)
mean.pred <- stats::predict(dglm.fit, se.fit = TRUE)
mean.estim <- mean.pred$fit
mean.se <- mean.pred$se.fit
sd.pred <- stats::predict(dglm.fit$dispersion.fit, se.fit = TRUE)
sd.estim <- sd.pred$fit/sd.pred$residual.scale
sd.se <- sd.pred$se.fit
indiv.prediction.tbl <- dplyr::bind_cols(stats::na.omit(modeling.df),
dplyr::data_frame(indiv.mean.estim = mean.estim, indiv.mean.lb = mean.estim -
mean.se, indiv.mean.ub = mean.estim + mean.se, indiv.sd.estim = exp(sd.estim),
indiv.sd.lb = exp(sd.estim - sd.se), indiv.sd.ub = exp(sd.estim +
sd.se)))
group.prediction.tbl <- indiv.prediction.tbl %>% dplyr::group_by_(.dots = c(focal.groups)) %>%
dplyr::summarise(group.mean.estim = mean(indiv.mean.estim),
group.mean.lb = mean(indiv.mean.lb), group.mean.ub = mean(indiv.mean.ub),
group.sd.estim = mean(indiv.sd.estim), group.sd.lb = mean(indiv.sd.lb),
group.sd.ub = mean(indiv.sd.ub))
return(group.prediction.tbl)
}
fsizedf <- data.frame(NULL)
y = 1:length(foutv$result$loc.name)
y = y[-c(826)]
for (x in y){
tempm =  effect.sizes(cross = family,
phenotype.name = "PlantHeight",
genotype.names = c("AA","BB"),
focal.groups = foutv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
fsizedf = rbind(fsizedf,tempv)
}
?scanonevar
libarary("dplyr")
library("dplyr")
for (x in y){
tempm =  effect.sizes(cross = family,
phenotype.name = "PlantHeight",
genotype.names = c("AA","BB"),
focal.groups = foutv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
fsizedf = rbind(fsizedf,tempv)
}
for (x in y){
tempm =  effect.sizes(cross = family,
phenotype.name = "PlantHeight",
genotype.names = c("AA","BB"),
focal.groups = foutv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
fsizedf = rbind(fsizedf,tempv)
}
effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = foutv$result$loc.name[470])
foutvdf<- data.frame(foutv$result$loc.name,
foutv$result$pos,
foutv$result$mean.lod,
foutv$result$mean.asymp.p,
foutv$result$var.lod,
foutv$result$var.asymp.p,
foutv$result$joint.lod,
foutv$result$joint.asymp.p)
dim(foutvdf)
foutvdf = foutvdf[-c(826),]
foutvdf = cbind(foutvdf,fsizedf)
dim(foutvdf)
dim(fsizedf)
str(fsizedf)
length(y)
fsizedf <- data.frame(NULL)
y = 1:length(foutv$result$loc.name)
y = y[-c(826)]
fsizedf = sapply(y, function(x){
tempm =  effect.sizes(cross = family,
phenotype.name = "PlantHeight",
genotype.names = c("AA","BB"),
focal.groups = foutv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(tempv)
})
str(fsizedf)
foutvdf<- data.frame(foutv$result$loc.name,
foutv$result$pos,
foutv$result$mean.lod,
foutv$result$mean.asymp.p,
foutv$result$var.lod,
foutv$result$var.asymp.p,
foutv$result$joint.lod,
foutv$result$joint.asymp.p)
dim(foutvdf)
library("randomForest")
library("MASS")
library("parallel")
starttime = Sys.time()
i = (1.0293)^(1/12) - 1
date.read <- function(yyyymm){
as.Date(paste0(as.character(yyyymm), '01'), format='%Y%m%d')
}
nmonths <- function(end, start) {
ed <- as.POSIXlt(end)
sd <- as.POSIXlt(start)
12 * (ed$year - sd$year) + (ed$mon - sd$mon) + 1
}
set.grab <- function(orig, perfo){
sets = as.list(NULL)
a = as.character(orig$`Loan Sequence Number`)
b = as.character(perfo$`Sequence Number`)
info.matrix = outer(a,b,"==")
coor = which(info.matrix==TRUE, arr.ind = TRUE)
sets = lapply(1:length(a),function(x){
set = NULL
app = coor[which(coor[,1] == x, arr.ind = TRUE),2]
set = rbind(perfo[app,])
sets[[x]] = set
})
return(sets)
}
classify <- function(set){
if(is.null(set[dim(set)[1],]$`Zero Balance`) | is.na(set[dim(set)[1],]$`Zero Balance`)){
return("Current")
}else{
if(set[dim(set)[1],]$`Zero Balance` == 1){
return("Prepaid")
} else
if((set[dim(set)[1],]$`Zero Balance`== 3) |(set[dim(set)[1],]$`Zero Balance`== 9) ){
return("Default")
}
prepaid.npv <- function(set,i){
return(sum((set$`Current UPB` * set$`Current Interest Rate`/1200)[-dim(set)[1]],
(set$`Current UPB`[-dim(set)[1]] - set$`Current UPB`[-1]) * (1 + i)^(-1 * set$`Loan Age`[-1])) - set$`Current UPB`[1])
}
default.npv <- function(set,i){
PMT = sum((set$`Current UPB` * set$`Current Interest Rate`/1200)[-dim(set)[1]],
(set$`Current UPB`[-dim(set)[1]] - set$`Current UPB`[-1]) * (1 + i)^(-1 * set$`Loan Age`[-1]))
nreal = as.numeric(set[dim(set)[1]-1,]$`Loan Age`)
ti = nreal + nmonths(end = date.read(set[dim(set)[1],]$`Zero Balance Date`), start = date.read(set[dim(set)[1],]$`Last Paid Installment`)) - 1
vit = (1 + i)^(-ti)
OUPB = set[1,]$`Current UPB`
CUPB = set[dim(set)[1]-1,]$`Current UPB`
AL = set[dim(set)[1],]$`Actual Loss`
NPV = PMT - OUPB + vit * (CUPB + AL)
return(NPV)
}
npv = function(set, i){
set = as.data.frame(set)
status = classify(set)
if (dim(set)[1] == 1){
return("NA")
}
if (status == "Prepaid" | status == "Current"){
NPV = prepaid.npv(set,i)
}else{
NPV = default.npv(set,i)
}
return(NPV)
}
org <- read.table(file ="C:/Users/Thomas/Desktop/Data/Freddie1999/sample_orig_1999.txt",header = FALSE, sep = "|")
names = c("CreditScore",
"FirstPmt",
"FirstTimeHomebuyer",
"Maturity Date",
"MSA Code",
"MI Percentage",
"Number of Units",
"Occupancy Status",
"CLTV",
"DTI",
"UPB",
"LTV",
"Interest Rate",
"Channel",
"PPM",
"Product",
"State",
"Property Type",
"Postal Code",
"Loan Sequence Number",
"Loan Purpose",
"Original Term",
"Borrower Num",
"Seller Name",
"Servicer Name",
"Super Conforming")
colnames(org) <- names
perf <- read.table(file ="C:/Users/Thomas/Desktop/Data/Freddie1999/sample_svcg_1999.txt",header = FALSE, sep = "|")
names = c("Sequence Number",
"Period",
"Current UPB",
"Delinquincy Status",
"Loan Age",
"Months to Maturity",
"Repurchased",
"Modification",
"Zero Balance",
"Zero Balance Date",
"Current Interest Rate",
"Current Deferred UPB",
"Last Paid Installment",
"MI Recoveries",
"Net Sales Proceeds",
"Non MI Recoveries",
"Expenses",
"Legal Costs",
"Maintainence and Preservation Costs",
"Tax and Insurance",
"Misc",
"Actual Loss",
"Modification Cost")
colnames(perf) = names
sq = as.numeric(perf$`Sequence Number`)
q = sq[-1] - sq[-length(sq)]
q = q*1:length(q)
q =c(0, q[q>0], length(sq))
sets = lapply(1:(length(q)-1), function(x){
print(x)
grow = (q[x]+1):q[x+1]
return(perf[grow,])
})
npvs = lapply(sets,function(x){
npv(set = x, i = (1.0293)^(1/12) - 1)
})
Q
os = as.character(unique(org$`Loan Sequence Number`))
ps = as.character(unique(perf$`Sequence Number`))
osn =sapply(os, function(x){
return(substr(x,6,12))
})
psn = sapply(ps, function(x){
return(substr(x,6,12))
})
osn = as.numeric(osn); psn = as.numeric(psn)
par(mfrow = c(2,1))
