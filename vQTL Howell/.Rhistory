debug(beep)
= "
beep(sound = "http://people.uncw.edu/narayans/sounds/sridhar.wav")
sound
file.exists(sound)
str_detect(sound, "^http://")
temp_file <- tempfile(pattern = "")
temp_file
download.file(sound, destfile = temp_file,
quiet = TRUE)
download.file(sound, destfile = temp_file,
quiet = TRUE) == 0
fitted = bn.fit(dag, learning.test)
fitted
plot(dag)
dag = model2network("[A][B][E][G][C|A:B][D|B][F|A:D:E:G]")
plot(dag)
fitted = bn.fit(dag, gaussian.test)
ftted
fitted
learn.net = empty.graph(names(learning.test))
modelstring(learn.net) = "[A][C][F][B|A][D|A:C][E|B:F]"
learn.net
plot(learn.net)
score(learn.net, learning.test)
?inter.iamb
class(learning.test)
learning.test
inter.iamb(learning.test)
plot(inter.iamb(learning.test))
plot(hc(learning.test))
bl = matrix(c("A", "B", "B", "A"), ncol = 2, byrow = TRUE)
plot(hc(learning.test, blacklist = bl))
unlist(bn.boot(learning.test, statistic = narcs,
algorithm = "hc", R = 10))
sapply(1:10,print)
x = sapply(1:10,print)
class(x)
x
length(x)
?c
x = c(1,3,5,7,9)
x
x= c(x,11)
x
class(x)
x = vector(1,3,5,7,9)
x = vector(c(1,3,5,7,9))
x = c(1,3,5,7,9)
x= c(x,11)
class(x)
x = list(1,3,5,7,9)
x
x= c(x,11)
class(x)
x
x[[5]]
x[[1]] = matrix(1:8, ncol = 2, byrow = TRUE)
x
?matri
?matrix
?model2network
bnlearn::model2network()
bnlearn::model2network
1:5
res = empty.graph(names(alarm))
> modelstring(res) = paste("[HIST|LVF][CVP|LVV][PCWP|LVV][HYP][LVV|HYP:LVF]",
+   "[LVF][STKV|HYP:LVF][ERLO][HRBP|ERLO:HR][HREK|ERCA:HR][ERCA]",
+   "[HRSA|ERCA:HR][ANES][APL][TPR|APL][ECO2|ACO2:VLNG][KINK]",
+   "[MINV|INT:VLNG][FIO2][PVS|FIO2:VALV][SAO2|PVS:SHNT][PAP|PMB][PMB]",
+   "[SHNT|INT:PMB][INT][PRSS|INT:KINK:VTUB][DISC][MVS][VMCH|MVS]",
+   "[VTUB|DISC:VMCH][VLNG|INT:KINK:VTUB][VALV|INT:VLNG][ACO2|VALV]",
+   "[CCHL|ACO2:ANES:SAO2:TPR][HR|CCHL][CO|HR:STKV][BP|CO:TPR]", sep = "")
res = empty.graph(names(alarm))
modelstring(res) = paste("[HIST|LVF][CVP|LVV][PCWP|LVV][HYP][LVV|HYP:LVF]",
+   "[LVF][STKV|HYP:LVF][ERLO][HRBP|ERLO:HR][HREK|ERCA:HR][ERCA]",
+   "[HRSA|ERCA:HR][ANES][APL][TPR|APL][ECO2|ACO2:VLNG][KINK]",
+   "[MINV|INT:VLNG][FIO2][PVS|FIO2:VALV][SAO2|PVS:SHNT][PAP|PMB][PMB]",
+   "[SHNT|INT:PMB][INT][PRSS|INT:KINK:VTUB][DISC][MVS][VMCH|MVS]",
+   "[VTUB|DISC:VMCH][VLNG|INT:KINK:VTUB][VALV|INT:VLNG][ACO2|VALV]",
+   "[CCHL|ACO2:ANES:SAO2:TPR][HR|CCHL][CO|HR:STKV][BP|CO:TPR]", sep = "")
modelstring(res) = paste("[HIST|LVF][CVP|LVV][PCWP|LVV][HYP][LVV|HYP:LVF]",
"[LVF][STKV|HYP:LVF][ERLO][HRBP|ERLO:HR][HREK|ERCA:HR][ERCA]",
"[HRSA|ERCA:HR][ANES][APL][TPR|APL][ECO2|ACO2:VLNG][KINK]",
"[MINV|INT:VLNG][FIO2][PVS|FIO2:VALV][SAO2|PVS:SHNT][PAP|PMB][PMB]",
"[SHNT|INT:PMB][INT][PRSS|INT:KINK:VTUB][DISC][MVS][VMCH|MVS]",
"[VTUB|DISC:VMCH][VLNG|INT:KINK:VTUB][VALV|INT:VLNG][ACO2|VALV]",
"[CCHL|ACO2:ANES:SAO2:TPR][HR|CCHL][CO|HR:STKV][BP|CO:TPR]", sep = "")
plot(res)
libarary(qtl,vqtl)
library(qtl,vqtl)
library(vqtl)
?read.cross
cross = read.cross(format = "csv", file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching BayesNet/ManchingScrubbed.csv")
org <- read.table(file ="C:/Users/Thomas/Desktop/Data/Freddie1999/sample_orig_1999.txt",header = FALSE, sep = "|")
names = c("CreditScore",
"FirstPmt",
"FirstTimeHomebuyer",
"Maturity Date",
"MSA Code",
"MI Percentage",
"Number of Units",
"Occupancy Status",
"CLTV",
"DTI",
"UPB",
"LTV",
"Interest Rate",
"Channel",
"PPM",
"Product",
"State",
"Property Type",
"Postal Code",
"Loan Sequence Number",
"Loan Purpose",
"Original Term",
"Borrower Num",
"Seller Name",
"Servicer Name",
"Super Conforming")
colnames(org) <- names
perf <- read.table(file ="C:/Users/Thomas/Desktop/Data/Freddie1999/sample_svcg_1999.txt",header = FALSE, sep = "|")
beep()
names = c("Sequence Number",
"Period",
"Current UPB",
"Delinquincy Status",
"Loan Age",
"Months to Maturity",
"Repurchased",
"Modification",
"Zero Balance",
"Zero Balance Date",
"Current Interest Rate",
"Current Deferred UPB",
"Last Paid Installment",
"MI Recoveries",
"Net Sales Proceeds",
"Non MI Recoveries",
"Expenses",
"Legal Costs",
"Maintainence and Preservation Costs",
"Tax and Insurance",
"Misc",
"Actual Loss",
"Modification Cost")
colnames(perf) = names
org1 = org[1:1000,]
which(as.character(perf$`Sequence Number`) == as.character(org[2000,]$`Loan Sequence Number`))
perf1 = perf[1:60000,]
which(as.character(perf$`Sequence Number`) == as.character(org[1000,]$`Loan Sequence Number`))
perf1 = perf[1:57891,]
sq = perf1$`Sequence Number`
q = sapply(2:length(sq),function(x){
if(sq[x] - sq[x-1]){
return(x)
} else return(0)
})
q = sapply(2:length(sq),function(x){
if(sq[x] != sq[x-1]){
return(x)
} else return(0)
})
x
class(sq)
sq[2] - sq[1]
levels(sq[2])
as.numeric(sq[q])
as.numeric(sq[1])
as.numeric(sq[300])
levels(perf$`Sequence Number`)[as.numeri(sq[300])]
levels(perf$`Sequence Number`)[as.numeric(sq[300])]
sq[300]
sq = as.numeric(perf1$`Sequence Number`)
q = sq[-1] - sq[-length(sq)]
q
unique(q)
q * 1:length(q)
(q * 1:length(q)>0)
q * 1:length(q)
q[q * 1:length(q)!=0]
q = q*1:length(q)
q
q[q>0]
length(q[q>0])
q = q[q>0]
q
q =c(1, q[q>0])
q
q =c(1, q[q>0], length(sq))
q
tail(q)
sets = list()
q = sq[-1] - sq[-length(sq)]
q = q*1:length(q)
q =c(1, q[q>0], length(sq))
head(q)
tail(q)
x = 1
grow = q[x]:(q[x+1]-1)
grow
x = 100
grow = q[x]:(q[x+1]-1)
grow
x  = 1
grow = q[x]:(q[x+1]-1)
sets = lapply(1:length(q)-1, function(x){
print(x)
grow = q[x]:(q[x+1]-1)
return(perf[grow,])
})
sets = lapply(1:(length(q)-1), function(x){
print(x)
grow = q[x]:(q[x+1]-1)
return(perf[grow,])
})
length(q)
length(sets)
sets[[1]]
sets[[1001]]
tail(sets[[1001]])
set.grab <- function(orig, perfo){
sets = as.list(NULL)
a = as.character(orig$`Loan Sequence Number`)
b = as.character(perfo$`Sequence Number`)
info.matrix = outer(a,b,"==")
coor = which(info.matrix==TRUE, arr.ind = TRUE)
sets = lapply(1:length(a),function(x){
set = NULL
app = coor[which(coor[,1] == x, arr.ind = TRUE),2]
set = rbind(perfo[app,])
sets[[x]] = set
})
return(sets)
}
classify <- function(set){
if(is.null(set[dim(set)[1],]$`Zero Balance`) | is.na(set[dim(set)[1],]$`Zero Balance`)){
return("Current")
}else{
if(set[dim(set)[1],]$`Zero Balance` == 1){
return("Prepaid")
} else
if((set[dim(set)[1],]$`Zero Balance`== 3) |(set[dim(set)[1],]$`Zero Balance`== 9) ){
return("Default")
}
prepaid.npv <- function(set,i){
return(sum((set$`Current UPB` * set$`Current Interest Rate`/1200)[-dim(set)[1]],
(set$`Current UPB`[-dim(set)[1]] - set$`Current UPB`[-1]) * (1 + i)^(-1 * set$`Loan Age`[-1])) - set$`Current UPB`[1])
}
default.npv <- function(set,i){
PMT = sum((set$`Current UPB` * set$`Current Interest Rate`/1200)[-dim(set)[1]],
(set$`Current UPB`[-dim(set)[1]] - set$`Current UPB`[-1]) * (1 + i)^(-1 * set$`Loan Age`[-1]))
nreal = as.numeric(set[dim(set)[1]-1,]$`Loan Age`)
ti = nreal + nmonths(end = date.read(set[dim(set)[1],]$`Zero Balance Date`), start = date.read(set[dim(set)[1],]$`Last Paid Installment`)) - 1
vit = (1 + i)^(-ti)
OUPB = set[1,]$`Current UPB`
CUPB = set[dim(set)[1]-1,]$`Current UPB`
AL = set[dim(set)[1],]$`Actual Loss`
NPV = PMT - OUPB + vit * (CUPB + AL)
return(NPV)
}
npv = function(set, i){
set = as.data.frame(set)
status = classify(set)
if (length(set) == 1){
return("NA")
}
if (status == "Prepaid" | status == "Current"){
NPV = prepaid.npv(set,i)
}else{
NPV = default.npv(set,i)
}
return(NPV)
}
npvs = lapply(sets,npv(i = (1.0293)^(1/12) - 1))
npvs = lapply(sets,function(x){
npv(set = x, i = (1.0293)^(1/12) - 1)
})
npvs
unlist(npvs)
hist(npvs)
hist(unlist(npvs))
npvs
npvs[1]
sets[[1]]
perf[1:7,]
sets[[2]]
tail(sets[[2]])
q = sq[-1] - sq[-length(sq)]
q = q*1:length(q)
q =c(0, q[q>0], length(sq))
grow = (q[x]+1):q[x+1]
sets = lapply(1:(length(q)-1), function(x){
print(x)
grow = (q[x]+1):q[x+1]
return(perf[grow,])
})
npvs = lapply(sets,function(x){
npv(set = x, i = (1.0293)^(1/12) - 1)
})
nmonths <- function(end, start) {
ed <- as.POSIXlt(end)
sd <- as.POSIXlt(start)
12 * (ed$year - sd$year) + (ed$mon - sd$mon) + 1
}
npvs = lapply(sets,function(x){
npv(set = x, i = (1.0293)^(1/12) - 1)
})
date.read <- function(yyyymm){
as.Date(paste0(as.character(yyyymm), '01'), format='%Y%m%d')
}
npvs = lapply(sets,function(x){
npv(set = x, i = (1.0293)^(1/12) - 1)
})
hist(unlist(npvs))
mean(unlist(npvs))
sd(unlist(npvs))
max(unlist(npvs))
dim(perf)
length(npvs)
sq = as.numeric(perf$`Sequence Number`)
q = sq[-1] - sq[-length(sq)]
q = q*1:length(q)
q =c(0, q[q>0], length(sq))
sets = lapply(1:(length(q)-1), function(x){
print(x)
grow = (q[x]+1):q[x+1]
return(perf[grow,])
})
npvs = lapply(sets,function(x){
npv(set = x, i = (1.0293)^(1/12) - 1)
})
x
sets[[50000]]
sets[[49999]]
tail(sets[[4999]])
tail(sets[[49999]])
sets[[50000]]
sets[[50001]]
length(sets)
length(sets[[50000]])
dim(sets[[50000]])
npv = function(set, i){
set = as.data.frame(set)
status = classify(set)
if (dim(set)[1] == 1){
return("NA")
}
if (status == "Prepaid" | status == "Current"){
NPV = prepaid.npv(set,i)
}else{
NPV = default.npv(set,i)
}
return(NPV)
}
Q
npv = function(set, i){
set = as.data.frame(set)
status = classify(set)
if (dim(set)[1] == 1){
return("NA")
}
if (status == "Prepaid" | status == "Current"){
NPV = prepaid.npv(set,i)
}else{
NPV = default.npv(set,i)
}
return(NPV)
}
npvs = lapply(sets,function(x){
npv(set = x, i = (1.0293)^(1/12) - 1)
})
set
1+1
sets = lapply(1:(length(q)-1), function(x){
print(x)
grow = (q[x]+1):q[x+1]
return(perf[grow,])
})
length(perf$`Sequence Number`)
unique(perf$`Sequence Number`)
unique(org$`Loan Sequence Number`)
tail(unique(org$Loan sample()))
tail(unique(org$`Loan Sequence Number`))
tail(unique(perf$`Sequence Number`))
?diff
diff(q)
diff(org$`Loan Sequence Number`)
unique(org$`Loan Purpose`)
unique(org$`Loan Sequence Number`)
as.character(unique(org$`Loan Sequence Number`))
os = as.character(unique(org$`Loan Sequence Number`))
ps = as.character(unique(perf$`Sequence Number`))
ps[-os]
os
length(ps[1])
nchar(ps[1])
sapply(ps, function(x){
return(substr(x,6,12))
})
osn =sapply(ps, function(x){
return(substr(x,6,12))
})
osn =sapply(os, function(x){
return(substr(x,6,12))
})
psn = sapply(ps, function(x){
return(substr(x,6,12))
})
osn
class(osn)
str(os)
str(osn)
as.numeric(osn)
osn = as.numeric(osn); psn = as.numeric(psn)
hist(osn)
hist(psn)
hist(osn)
hist(psn)
hist(osn)
hist(psn)
x = osn[1]
x
psn
mch =  which(psn == x)
mch
sapply(osn, function(x){
mch =  which(psn == x)
if(!is.null(mch){
return(NULL)
}) else return(x)
})
sapply(osn, function(x){
mch =  which(psn == x)
if(!is.null(mch)){
return(NULL)
} else return(x)
})
sapply(osn, function(x){
print(x)
mch =  which(psn == x)
if(!is.null(mch)){
return(NULL)
} else return(x)
})
beep()
dif = sapply(osn, function(x){
print(x)
mch =  which(psn == x)
if(!is.null(mch)){
return(NULL)
} else return(x)
})
sapply(diff,is.null)
a = sapply(diff,is.null)
which(a == FALSE)
length(a)
head(org$`Loan Sequence Number`)
head(perf$`Sequence Number`)
head(unique(perf$`Sequence Number`))
x = os[1]
substr(x,6,12)
x
tail(os)
x = os[length(os)]
x
substr(x,6,12)
os
ps
os
ps
os
ps
os
sets[[50000]]
length(npvs)
org$`Loan Sequence Number`[dim(org)[1]]
npvs = lapply(sets,function(x){
npv(set = x, i = (1.0293)^(1/12) - 1)
})
set
head(set)
status
classify(set)
a = classify(set)
a
library(qtl)
library(vqtl)
cross = read.cross(format = "csv", file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching BayesNet/ManchingScrubbed.csv")
scanv = scanonevar(cross = cross, mean.formula = Height ~ mean.QTL.add + Low.Water + Low.Nitrogen + Pathogen,
var.formula =  ~ var.QTL.add + Low.Water + Low.Nitrogen + Pathogen)
cross = read.cross(format = "csv", file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching BayesNet/ManchingScrubbed.csv")
gc()
scanv = scanonevar(cross = cross, mean.formula = Height ~ mean.QTL.add + Low.Water + Low.Nitrogen + Pathogen,
var.formula =  ~ var.QTL.add + Low.Water + Low.Nitrogen + Pathogen)
?calc.genoprob
cgp = calc.genoprob(cross = cross)
scanv = scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + Low.Water + Low.Nitrogen + Pathogen,
var.formula =  ~ var.QTL.add + Low.Water + Low.Nitrogen + Pathogen)
setwd("C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/vQTL Howell")
dat = read.csv(file = "HeatStress.csv")
dat = read.csv(file = "Heat Stress.csv")
zvals = as.character(dat[,1])
gbs = read.table(file = "Howell_scrubbed_Z_to_SNPs.txt")
gbs[1:10,1:10]
?read.table
gbs = read.table(file = "Howell_scrubbed_Z_to_SNPs.txt", header = TRUE)
unique(gbs)
length(unique(gbs))
head(colnames(gbs))
gbs[1:10,1:10]
