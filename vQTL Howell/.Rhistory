vif(modc2)
summary(modc2)
AIC(modc2);BIC(modc2)
shapiro.test(datascc$NPV[1:5000])
hist(datascc$NPV,breaks = 50, main = "NPV Distribution", xlab = "NPVs")
npv  = datascc$NPV
n = length(datascc$NPV)
npv.ecdf<-ecdf(datascc$NPV)
acper<-npv.ecdf(npv)-1/2/n
avg.npv<-mean(npv);sd.npv<-sd(npv)
npv.tran<-qnorm(acper,avg.npv,sd.npv)
head(cbind(npv,acper,npv.tran))
shapiro.test(sample(npv.tran,5000))
par(mfrow = c(2,1))
hist(npv.tran, breaks = 50)
hist(npv, breaks = 50)
trandat = datascc
trandat$NPV = npv.tran
modc3 = lm(NPV ~ CreditScore + DTI + UPB  +
LTV + `Interest Rate`  + `Original Term`, trandat)
vif(modc3)
summary(modc3)
AIC(modc3);BIC(modc3)
mods = lm(NPV/UPB ~ CreditScore + DTI   +
LTV + `Interest Rate`  + `Original Term`, datascc)
summary(mods)
hist(datascc$NPV/datascc$UPB, breaks = 100)
mods = lm(NPV/UPB ~ CreditScore + DTI   +
LTV + `Interest Rate`  + `Original Term`, trandat)
summary(mods)
hist(trandat$NPV/trandat$UPB, breaks = 100)
dim(datascc)
#####Randomforest Exploratory#####
trainingset = sample(1:nrow(datascc),500)
train.rf = randomForest(NPV ~ ., CreditScore + DTI + UPB  + LTV + `Interest Rate`  + `Original Term`,
data = datascc, subset = trainingset)
colnames(datascc)
train.rf = randomForest(NPV ~ CreditScore + DTI + UPB  + LTV + `Interest Rate`  + `Original Term`,
data = datascc, subset = trainingset)
datascc$`Interest Rate`
all(!is.na(datascc$`Interest Rate`))
complete.cases(datascc)
all(complete.cases(datascc))
train.rf = randomForest(NPV ~ CreditScore + DTI + UPB  + LTV + `Interest Rate`  + `Original Term`,
data = datascc, subset = trainingset)
#####Randomforest Exploratory#####
names(datascc) = make.names(names(datascc))
names(datascc)
train.rf = randomForest(NPV ~ CreditScore + DTI + UPB  + LTV + Interest.Rate  + Original.Term,
data = datascc, subset = trainingset)
train.rf
trainingset = sample(1:nrow(datascc),5000)
train.rf = randomForest(NPV ~ CreditScore + DTI + UPB  + LTV + Interest.Rate  + Original.Term,
data = datascc, subset = trainingset)
train.rf
plot(train.rf)
par(mfrow)
par(mfrow = c(1,1))
plot(train.rf)
train.rf = randomForest(NPV ~.,
data = datascc, subset = trainingset)
names(datascc)
#####Randomforest Exploratory#####
badvars <- c(5,16,18,19,22)
rfdat = datascc[,-badvars]
#####Randomforest Exploratory#####
badvars <- c(5,16,18,19,22)
rfdat = datascc[,-badvars]
names(rfdat) = make.names(names(rfdat))
trainingset = sample(1:nrow(rfdat),5000)
train.rf = randomForest(NPV ~.,
data = rfdat, subset = trainingset)
names(rfdat)
sapply(1:ncol(rfdat), function(x){
unique(rfdat[x,])
})
sapply(1:ncol(rfdat), function(x){
length(unique(rfdat[x,]))
})
unq = sapply(1:ncol(rfdat), function(x){
unique(rfdat[x,])
})
unq
class(unq)
unq = sapply(1:ncol(rfdat), function(x){
unique(rfdat[,x])
})
unq
unq = sapply(1:ncol(rfdat), function(x){
length(unique(rfdat[,x]))
})
unq
unique(rfdat[,1])
unq = sapply(1:ncol(rfdat), function(x){
dim(unique(rfdat[,x]))[1]
})
unq
unq = sapply(1:ncol(rfdat), function(x){
c(dim(unique(rfdat[,x]))[1],
all(!is.na(rfdat[,x])))
})
unq
train.rf = randomForest(NPV ~.,
data = rfdat, subset = trainingset)
unq = sapply(1:ncol(rfdat), function(x){
c(dim(unique(rfdat[,x]))[1],
all(!is.na(rfdat[,x])),
all(!is.null(rfdat[,x])))
})
unq
unique(rfdat[,3])
unique(rfdat[,])
unique(rfdat[,14])
unique(rfdat[,7])
train.rf = randomForest(NPV ~.,
data = rfdat, subset = trainingset)
str(rfdat)
str(rfdat[,1])
class(rfdat[,1])
rfdat$Occupancy.Status = as.factor(rfdat$Occupancy.Status)
rfdat$Channel = as.factor(rfdat$Channel)
rfdat$PPM = as.factor(rfdat$PPM)
rfdat$Property.Type = as.factor(rfdat$Property.Type)
rfdat$Loan.Purpose = as.factor(rfdat$Loan.Purpose)
rfdat$Seller.Name = as.factor(rfdat$Seller.Name)
rfdat$Servicer.Name = as.factor(rfdat$Servicer.Name)
str(rfdat)
rfdat$FirstTimeHomebuyer = as.factor(rfdat$FirstTimeHomebuyer)
str(rfdat)
train.rf = randomForest(NPV ~.,
data = rfdat, subset = trainingset)
train.rf
plot(train.rf)
?double
oob.err=double(6)
test.err=double(6)
trainingset = sample(1:nrow(rfdat),500)
train.rf = randomForest(NPV ~.,
data = rfdat, subset = trainingset)
train.rf
plot(train.rf)
train = sample(1:nrow(rfdat),500)
train.rf = randomForest(NPV ~.,
data = rfdat, subset = train)
train.rf
plot(train.rf)
oob.err=double(6)
test.err=double(6)
#mtry is no of Variables randomly chosen at each split
for(mtry in 1:6)
{
rf=randomForest(NPV ~ . , data = rfdat , subset = train,mtry=mtry,ntree=400)
oob.err[mtry] = rf$mse[400] #Error of all Trees fitted
pred<-predict(rf,rfdat[-train,]) #Predictions on Test Set for each Tree
test.err[mtry]= with(rfdat[-train,], mean( (NPV - pred)^2)) #Mean Squared Test Error
cat(mtry," ") #printing the output to the console
}
test.err
oob.err
?matplot
matplot(1:mtry , cbind(oob.err,test.err), pch=19 , col=c("red","blue"),type="b",ylab="Mean Squared Error",xlab="Number of Predictors Considered at each Split")
legend("topright",legend=c("Out of Bag Error","Test Error"),pch=19, col=c("red","blue"))
matplot(1:mtry , cbind(oob.err,test.err), pch=19 , col=c("red","blue"),type="b",ylab="Mean Squared Error",xlab="Number of Predictors Considered at each Split")
train = sample(1:nrow(rfdat),5000)
train.rf = randomForest(NPV ~.,
data = rfdat, subset = train)
train.rf
plot(train.rf)
oob.err=double(6)
test.err=double(6)
#mtry is no of Variables randomly chosen at each split
for(mtry in 1:6)
{
rf=randomForest(NPV ~ . , data = rfdat , subset = train,mtry=mtry,ntree=400)
oob.err[mtry] = rf$mse[400] #Error of all Trees fitted
pred<-predict(rf,rfdat[-train,]) #Predictions on Test Set for each Tree
test.err[mtry]= with(rfdat[-train,], mean( (NPV - pred)^2)) #Mean Squared Test Error
cat(mtry," ") #printing the output to the console
}
test.err
oob.err
matplot(1:mtry , cbind(oob.err,test.err), pch=19 , col=c("red","blue"),type="b",ylab="Mean Squared Error",xlab="Number of Predictors Considered at each Split")
legend("topright",legend=c("Out of Bag Error","Test Error"),pch=19, col=c("red","blue"))
install.packages("RandomGLM")
install.packages("randomGLM")
####RGLM#####
library("randomGLM")
dim(rfdat)
rglm = randomGLM(x = rfdat[train,-20],y = rfdat$NPV[train])
class(rfdat$CreditScore)
class(rfdat$FirstPmt)
class(rfdat$FirstTimeHomebuyer)
?model.matrix
?sample
cv.size
cv.size<-5;rfdat.gp<-sample(1:cv.size,n,T) # table(dat.gp)
cv.size
x = 1
cv.size<-5;rfdat.gp<-sample(1:cv.size,n,T) # table(dat.gp)
#####Analysis of NPV results#####
####Have Shell Script go to Honors Directory#####
library("tidyverse")
library("randomForest")
library("car")
library("Rborist");#install.packages('Rborist')
datas= read.csv(file = "OrgNPVs.csv")
source('~/GitHub/Wang499/Analysis/Stampede_RF_1.R')
cb<- matrix(c(6,8,9), nrow = 1)
cb
bi<- matrix(c(11,-3,1,
-6,9,-3,
2,-3,10), nrow = 3, byrow = T)
bi
a <- matrix(c(1,2,3,3,0,
4,3,2,1,1,
1,3,0,1,1), nrow = 3, byrow = T)
c <- matrix(c(8,4,6,3,9), nrow = 1)
c
cb %*% bi
cb %*% bi %*% a
cb %*% bi %*% a - c
(1/27) * (cb %*% bi %*% a - c)
#5.3-1
cb<- matrix(c(-1,2,0), nrow = 1)
bi<- matrix(c(1,3,0,
0,1,1,
1,2,0), nrow = 3, byrow = T)
a<- matrix(c(2,-2,3,
1,1,-1,
1,-1,1), nrow = 3, byrow = T)
bi %*% a
c(1,1,0) %*% a
cb %*% bu
cb %*% bi
#5.3-1
cb<- matrix(c(-1,0,2), nrow = 1)
cbi <- cb %*% bi
cbi
b <- matrix(c(5,3,2), nrow = 3)
b
cbi %*% b
cbi %*% a
c <- c(1,-1,2)
cbi %*% a - b
cbi %*% a - c
bi %*% a
bi %*% b
bi<- matrix(c(1,1,2,
-2,0,4,
1,0,-1), nrow = 3, byrow = T)
a<- matrix(c(2,2,.5,
-4,-2,-3/2,
1,2,.5), nrow = 3, byrow = T)
#5.3-3
cb<- matrix(c(0,2,6), nrow = 1)
c <- c(6,1,2)
b <- matrix(c(2,3,1), nrow = 3)
bi<- matrix(c(1,1,2,
-2,0,4,
1,0,-1), nrow = 3, byrow = T)
a<- matrix(c(2,2,.5,
-4,-2,-3/2,
1,2,.5), nrow = 3, byrow = T)
bi %*% a
cbi <- cb %*% bi
cbi %*% b
cbi <- cb %*% bi;cbi
cbi %*% b
cbi %*% a - c
cbi %*% a
bi %*% b
#####Working with a howell Sampleset#####
#constructing the sample
library("tidyverse")
library("qtl")
library("vqtl")
setwd("C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/vQTL Howell")
write.table(crossframec, "Howell-Cross-ObjectC2.csv",
row.names = FALSE, col.names = T, sep = ",")
##getting rid of redundant columns
tablec = read_csv("Howell-Cross-ObjectC2.csv")
unq = sapply(3:ncol(tablec),function(x){
print(x)
dim(unique(tablec[3:134,x]))[1]
})
head(unq)
sapply(3:10(tablec), function(x){})
sapply(3:10(tablec), function(x){
unique(tablec[3:134,x]))
})
sapply(3:10(tablec), function(x){
unique(tablec[3:134,x]))
})
sapply(3:10(tablec), function(x){
unique(tablec[3:134,x])
})
sapply(3:10, function(x){
unique(tablec[3:134,x])
})
uunq = sapply(3:ncol(tablec),function(x){
print(x)
unique(tablec[3:134,x])
})
library("beepr")
beep()
unique(uunq)
which(uunq == list("B","A"))
which(uunq == list(c("B","A"))
)
uunq[[1]]
class(uunq[[1]])
uunq[[1]] == c("B", "N")
all(uunq[[1]] == c("B", "N"))
which(uunq[[1]] == c("B", "A") | uunq[[1]] == c("A", "B"))
which(uunq == c("B", "A") | uunq == c("A", "B"))
length(which(uunq == c("B", "A") | uunq == c("A", "B")))
length(which(unq == 3))
#####Making sure that there are no rare alleles#####
tabler <- read_csv(path = "Howell-Cross-Object-Ratio.csv")
?read.csv
?read_csv
#####Making sure that there are no rare alleles#####
tabler <- read_csv(file = "Howell-Cross-Object-Ratio.csv")
beep()
tabler[1:6,1:6]
unique(-1:-2,-1)
unique(tabler[-1:-2,-1])
beep()
unqc <-sapply(2:dim(tabler)[2], function(x){
unique(tabler[3:dim(tabler)[1],x])
})
beep()
head(unqc)
unique(unlist(unqc))
tableu <- read_csv(file = "Howell-Cross-ObjectC3.csv")
unqc <-sapply(3:dim(tableu)[2], function(x){
unique(tableu[3:dim(tableu)[1],x])
})
unique(unlist(unqc))
beep()
dat = read_csv(file = "Heat Stress.csv")
zvals = dat$taxa_NAM_RIL_ID
start = Sys.time()
gbs = read.table(file = "Howell_scrubbed_Z_to_SNPs.txt", header = TRUE, stringsAsFactors = FALSE)
library("tidyverse")
setwd("C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/vQTL Howell")
dat = read_csv(file = "Heat Stress.csv")
zvals = dat$taxa_NAM_RIL_ID
full <- read_file("AllZeaGBSv27_imputed_taxa.txt")
str(full)
full <- read_delim("AllZeaGBSv27_imputed_taxa.txt", sep = "\t")
?read_delim
full <- read_delim("AllZeaGBSv27_imputed_taxa.txt", delim = "\t")
str(full)
full$`05-397:250007467`
full$`Genetic Architecture of Maize and Teosinte (Maize Diversity Project)`
head(full$`05-397:250007467`)
?grep
which(substr(full$`05-397:250007467`,1,5) == "Z008E")
pert <- which(substr(full$`05-397:250007467`,1,5) == "Z008E")
dat$taxa_NAM_RIL_ID
pert <- which(substr(full$`05-397:250007467`,1,5) %in% dat$taxa_NAM_RIL_ID)
pert
pert <- which(full$`05-397:250007467` %in% dat$taxa_NAM_RIL_ID)
pert
pert <- which(substr(full$`05-397:250007467`,1,9) %in% dat$taxa_NAM_RIL_ID)
pert
keep <- full$`05-397:250007467`[,pert]
keep <- full$`05-397:250007467`[pert]
keep
write_csv(keep, file = "Full_Z_Names.csv")
?write_csv
write_csv(keep, path = "Full_Z_Names.csv")
write_delim(keep, path = "Full_Z_Names.csv", sep = ",")
write_delim(keep, path = "Full_Z_Names.csv", delim = ",")
keep <- as.data.frame(full$`05-397:250007467`[pert])
keep
write_csv(keep, path = "Full_Z_Names.csv")
write_csv(keep, path = "Full_Z_Names.csv", col_names = F)
?write_delim
write_delim(keep, path = "Full_Z_Names.txt", delim = "\n" ,col_names = F)
dat = read_csv(file = "Heat Stress.csv")
zvals = dat$taxa_NAM_RIL_ID
start = Sys.time()
gbs = read.table(file = "Howell_scrubbed_Z_to_SNPs.txt", header = TRUE, stringsAsFactors = FALSE)
timetaken = Sys.time() - start;timetaken
gbsnames = substr(as.character(gbs$Taxa),1,9)
fullnames = vector()
org  = lapply(1:length(zvals),function(x){
gbs[which(gbsnames == zvals[x]),1]
})
scrubbed = sapply(org,function(ex){
cln = gregexpr(":",ex)[[1]]
bad = c(cln[1],cln[length(cln)])
paste(substr(ex,1,bad[1]),substr(ex,bad[2]+1,nchar(as.character(ex))), sep = "")
})
write.csv(scrubbed, file = "ScrubbedNames.csv", row.names = FALSE, col.names = FALSE)
beep()b
beep()
head(org)
#Test1, just assume to use the first of the availabe Z vals with multiple Taxa
used = (unlist(lapply(org, function(x){
x[1]
})))
usedLoc = sapply(1:length(used), function(x){
which(gbs$Taxa == used[x])
})
usedDat = gbs[usedLoc,]
usedDat$Taxa = substr(usedDat$Taxa, 1, 9)
precrossObj = cbind(dat[,2:3],usedDat[,-1])
precrossObj = rbind(colnames(precrossObj), precrossObj)
cn = sapply(colnames(precrossObj)[-1:-2],function(x){
substr(x,2,nchar(x))
})
cn = c(colnames(precrossObj)[1:2], cn)
colnames(precrossObj) = NA
chrs = c(rep(1,8554),rep(2,4900),
rep(3,4680),rep(4,4680),
rep(5,3854),rep(6,3466),
rep(7,3317),rep(8,2476),
rep(9,4202),rep(2,3378))
precrossObj = rbind(cn,chrs,precrossObj)
precrossObj[2:3,1:2] = ""
x = 3:dim(precrossObj)[2]
precrossObj[3,x] = precrossObj[1,x]
precrossObj[1:6,1:6]
#
# mnames <- 3:ncol(crossframes)
# mnames <- sapply(mnames, function(x){
#   paste("Marker Name", eval(x-2))
# })
# samp = sample(3:dim(crossframe)[2],ceiling(dim(crossframe)[2]/100))
# crossframes = crossframe[,c(1,2,samp)]
# write.table(crossframes, "Howell-Cross-Object-Small.csv",
#             row.names = FALSE, col.names = c(colnames(crossframe)[1:2],mnames), sep = ",")
# #looking for unique markers
crossframes = read_csv("Howell-Cross-Object.csv")
pos <- outp$`Position (cM)`
outp <- read_csv(file = "HowellvQTL_Ratio_LOD,Pvals,EffectSizes.csv")
pos <- outp$`Position (cM)`
plot(pos)
dfr <- pos[-1]- pos[-length(pos)]
plot(dfr)
fnew <- c(1,which(dfr < 0), length(pos)+1)
fnew
pos <- outp$`Position (cM)`
plot(pos)
length(fnew)
org <- read_csv(file = "AllZeaGBSv27_imputed_taxa.txt")
org <- read_delim(file = "AllZeaGBSv27_imputed_taxa.txt")
org <- read_delim(file = "AllZeaGBSv27_imputed_taxa.txt", delim = "/t")
org <- read_csv(file = "Howell-Cross-ObjectC3.csv")
str(org)
org[1:6,1:6]
pos <- org[3:dim(org)[1],2]
pos
pos <- org[2,3:dim(org)[1]]
pos
pos <- unlist(org[2,3:dim(org)[1]])
head(pos)
pos <- as.numeric(org[2,3:dim(org)[1]])
head(pos)
plot(pos)
pos <- as.numeric(org[2,3:dim(org)[2]])
plot(pos)
org <- read_csv(file = "Howell-Cross-Object-Ratio.csv")
org[1:6,1:6]
pos <- as.numeric(org[2,2:dim(org)[2]])
plot(pos)
#C3 Object still has 10 chromosomes#
#Maybe it has
org <- read_csv(file = "HowellvQTL_Ratio_LOD,Pvals,EffectSizes.csv")
colnames(org)
head(org$`Position (cM)`)
pos <- as.numeric(org$`Position (cM)`)
plot(pos)
#C3 Object still has 10 chromosomes#
#Maybe it has
orgr <- read_csv(file = "Howell-Cross-Object-Ratio.csv")
posr <- as.numeric(org$`Position (cM)`)
plot(posr)
vqtlr <- read_csv(file = "HowellvQTL_Ratio_LOD,Pvals,EffectSizes.csv")
posvr <- as.numeric(vqtlr$`Position (cM)`)
plot(posvr)
beep()
plot(posr)
plot(posvr)
plot(posr)
orgr[1:6,1:6]
posr <- as.numeric(orgr[2,-1])
plot(posr)
plot(posvr)
which(posvr == max(br))
which(posvr == max(posvr))
max(posvr)
posvr
class(posvr)
max(posvr)
all(is.numeric(posvr))
all(is.na(posvr))
which(is.na(posvr))
max(posvr[which(!is.na(posvr))])
which(posvr == max(posvr[which(!is.na(posvr))])
)
all(!is.na(posr))
which(posr == max(posr))
plot(posr)
#C3 Object still has 10 chromosomes#
#Maybe it has
par(mfrow = c(2,1))
plot(posr)
plot(posvr)
