?find
find(scanonevar_)
#####Small Scale Analysis#####
cross = read.cross(file = "MSSample.csv");
cross = drop.nullmarkers(cross);
cross$pheno$Low.Water <- as.factor(cross$pheno$Low.Water)
cross$pheno$Low.Nitrogen <- as.factor(cross$pheno$Low.Nitrogen)
cross$pheno$Pathogen <- as.factor(cross$pheno$Pathogen)
cgp = calc.genoprob(cross = cross);
scanv = scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + mean.QTL.dom ,
var.formula =  ~ var.QTL.add + var.QTL.dom);
#####Multiple Stress vQTL#####
#to be run in stampede2
library(tidyverse)
#####Multiple Stress vQTL#####
#to be run in stampede2
library(tidyverse)
effect.sizes = function (cross, phenotype.name, focal.groups = NULL, nuisance.groups = NULL,
genotype.names = c("AA", "AB", "BB"), xlim = NULL, ylim = NULL,
title = paste(phenotype.name, "by", paste(focal.groups,
collapse = ", ")), draw_ribbons = TRUE, se_line_size = 1,
point_size = 1)
{
indiv.mean.estim <- indiv.mean.lb <- indiv.mean.ub <- "fake_global_for_CRAN"
indiv.sd.estim <- indiv.sd.lb <- indiv.sd.ub <- "fake_global_for_CRAN"
group.mean.estim <- group.mean.ub <- group.mean.lb <- "fake_global_for_CRAN"
group.sd.estim <- group.sd.ub <- group.sd.lb <- "fake_global_for_CRAN"
modeling.df <- dplyr::data_frame(placeholder = rep(NA, qtl::nind(cross)))
modeling.df[[phenotype.name]] <- cross[["pheno"]][[phenotype.name]]
marker.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.geno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.geno(cross = cross))])
phen.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.pheno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.pheno(cross = cross))])
for (marker.name in marker.names) {
modeling.df[[marker.name]] <- factor(x = qtl::pull.geno(cross = cross)[,
marker.name], labels = genotype.names)
}
for (phen.name in phen.names) {
modeling.df[[phen.name]] <- factor(qtl::pull.pheno(cross = cross)[[phen.name]])
}
modeling.df[["placeholder"]] <- NULL
covar.form <- paste(focal.groups, collapse = "+")
if (!is.null(nuisance.groups)) {
covar.form <- paste(covar.form, "+", paste(nuisance.groups,
collapse = "+"))
}
mean.form <- paste(phenotype.name, "~", covar.form)
var.form <- paste("~", covar.form)
dglm.fit <- dglm::dglm(formula = stats::formula(mean.form),
dformula = stats::formula(var.form), data = modeling.df)
mean.pred <- stats::predict(dglm.fit, se.fit = TRUE)
mean.estim <- mean.pred$fit
mean.se <- mean.pred$se.fit
sd.pred <- stats::predict(dglm.fit$dispersion.fit, se.fit = TRUE)
sd.estim <- sd.pred$fit/sd.pred$residual.scale
sd.se <- sd.pred$se.fit
indiv.prediction.tbl <- dplyr::bind_cols(stats::na.omit(modeling.df),
dplyr::data_frame(indiv.mean.estim = mean.estim, indiv.mean.lb = mean.estim -
mean.se, indiv.mean.ub = mean.estim + mean.se, indiv.sd.estim = exp(sd.estim),
indiv.sd.lb = exp(sd.estim - sd.se), indiv.sd.ub = exp(sd.estim +
sd.se)))
group.prediction.tbl <- indiv.prediction.tbl %>% dplyr::group_by_(.dots = c(focal.groups)) %>%
dplyr::summarise(group.mean.estim = mean(indiv.mean.estim),
group.mean.lb = mean(indiv.mean.lb), group.mean.ub = mean(indiv.mean.ub),
group.sd.estim = mean(indiv.sd.estim), group.sd.lb = mean(indiv.sd.lb),
group.sd.ub = mean(indiv.sd.ub))
return(group.prediction.tbl)
}
#set up a vector to run the function on
y = 1:length(scanv$result$loc.name);
#effect sizes can not be computed for these 3 SNPs so we remove them from the vector
#populating a dataframe with effect size estimates
nnames <- sapply(y, function(x){
a <- scanv$result$loc.name[x]
b <- nchar(a)
if(substr(a,b-5,b) == "_loc-5"){
a <- 0
} else if(substr(a,b-4,b) == "_loc5"){
a <- 0
}
return(a)
})
nnames <- nnames[which(nnames != 0)]
sizedf = sapply(1:length(nnames), function(x){
print(x)
tryCatch({
tempm <- effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
},
error = function(e) message(e),
finally = return(unlist(tempv))
)
});
tempv
tempm
x
x <- 76
nnames[76]
tempm <- effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
tempm <- effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
x
y
tempm <- effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
?tryCatch
tryCatch({
tempm <- effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
},
error = function(e) message(e),
finally = return(unlist(tempv))
)
tempm <- effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
tryCatch({
tempm <- effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
},
error = function(e) message(e),
finally = return(unlist(c(tempm[1,2:7],tempm[2,2:7])))
)
sizedf = sapply(1:length(nnames), function(x){
print(x)
tryCatch({
tempm <- effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
},
error = function(e) message(e),
finally = return(unlist(c(tempm[1,2:7],tempm[2,2:7])))
)
});
warnings()
x <- 1
tryCatch({
tempm <- effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
},
error = function(e) message(e),
finally = return(unlist(c(tempm[1,2:7],tempm[2,2:7])))
)
finally
tempm
unlist(c(tempm[1,2:7],tempm[2,2:7]))
x <- 1
tryCatch({
tempm <- effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
},
error = function(e) {
message(e)
return(NA)
},
finally = return(unlist(c(tempm[1,2:7],tempm[2,2:7])))
)
sizedf = sapply(1:length(nnames), function(x){
print(x)
tryCatch({
tempm <- effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
},
error = function(e) {
message(e)
return(NA)
},
finally = return(unlist(c(tempm[1,2:7],tempm[2,2:7])))
)
});
view(sizedf)
?view
head(sizedf)
#gathering data from the initial scan
scanvdf<- data.frame(scanv$result$loc.name,
scanv$result$pos,
scanv$result$mean.lod,
scanv$result$mean.asymp.p,
scanv$result$var.lod,
scanv$result$var.asymp.p,
scanv$result$joint.lod,
scanv$result$joint.asymp.p)
#combining both
scanvdf = cbind(scanvdf,t(sizedf))
colnames(scanvdf) = c("SNP Name",
"Position (cM)",
"Mean LOD",
"Mean P Value",
"Variance LOD",
"Variance P Value",
"Joint LOD",
"Joint P Value",
"A Mean Est",
"A Mean Lower Bound",
"A Mean Upper Bound",
"A Standard Deviation Est",
"A Standard Deviation Lower Bound",
"A Standard Deviation Upper Bound",
"B Mean Est",
"B Mean Lower Bound",
"B Mean Upper Bound",
"B Standard Deviation Est",
"B Standard Deviation Lower Bound",
"B Standard Deviation Upper Bound")
write.csv(scanvdf, file = "MultipleStress_Sample_vQTL_Height_LOD,Pvals,EffectSizes.csv",
row.names = F)
debug(scanonevar)
scanv = scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + mean.QTL.dom ,
var.formula =  ~ var.QTL.add + var.QTL.dom);
scanv = scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + mean.QTL.dom ,
var.formula =  ~ var.QTL.add + var.QTL.dom);
source('~/GitHub/Stapleton-Lab/Manching BayesNet/scanonevar_.R')
install.packages("profvis")
library('profvis')
profvis(
scanv = scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + mean.QTL.dom ,
var.formula =  ~ var.QTL.add + var.QTL.dom)
)
?profvis
profvis(scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + mean.QTL.dom ,
var.formula =  ~ var.QTL.add + var.QTL.dom))
undebug(scanonevar)
profvis(scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + mean.QTL.dom ,
var.formula =  ~ var.QTL.add + var.QTL.dom))
scanv = scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + mean.QTL.dom ,
var.formula =  ~ var.QTL.add + var.QTL.dom)
dat <- read.csv(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/HowellvQTL_Ratio_LOD,Pvals,EffectSizes.csv")
dat <- dat[,-1]
plot(dat$Mean.P.Value)
ggplot(data = dat) +
geom_point(aes(x = Position..cM., y = Mean.P.Value)) +
geom_hline(yintercept = .05, color = 'red')
ggplot(data = dat) +
geom_point(aes(x = Position..cM., y = Variance.P.Value)) +
geom_hline(yintercept = .05, color = 'red')
ggplot(data = dat) +
geom_point(aes(x = Position..cM., y = Joint.P.Value)) +
geom_hline(yintercept = .05, color = 'red')
?smooth
nas <- which(is.na(dat$Joint.P.Value))
yval <- smooth(dat$Joint.P.Value[-nas], kind = '3')
ggplot() +
geom_point(aes(x = dat$Position..cM.[-nas], y = as.numeric(yval))) +
geom_hline(yintercept = .05, color = 'red')
sig <- which(yval < .05)
repr <- c()
which(yval[sig][1:4] == min(yval[sig][1:4]))
repr <- c(repr,1)
which(yval[sig][5:6] == min(yval[sig][5:6]))
repr <- c(repr,5)
repr <- c(repr,7)
which(yval[sig][8:9] == min(yval[sig][8:9]))
repr <- c(repr,8)
which(yval[sig][10:11] == min(yval[sig][10:11]))
repr <- c(repr,10)
which(yval[sig][12:15] == min(yval[sig][12:15]))
repr <- c(repr,12)
which(yval[sig][16:17] == min(yval[sig][16:17]))
repr <- c(repr,16)
sig[repr]
ggplot(data = dat) +
geom_point(aes(x = Position..cM., y = Joint.P.Value)) +
geom_hline(yintercept = .05, color = 'red')
ggplot() +
geom_point(aes(x = dat$Position..cM.[-nas], y = as.numeric(yval))) +
geom_hline(yintercept = .05, color = 'red')
setwd('C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/')
dat <- read.csv(file = "VarLabels.csv")
sig <- which(dat$QTL_IDvarP_fdrTPM !="")
length(sig)
dat$QTL_IDvarP_fdrTPM[sig]
dat$Variance_P_Value_F9[sig]
x <- 1
which(dat$QTL_IDvarP_fdrTPM == x)
which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
keep[2]
keep[repr]
repr
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
repr
keep[repr]
map(1:10, function(x){
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
return(keep[repr])
})
map(1:10, function(x){
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
return(keep[repr][1])
})
unlist(map(1:10, function(x){
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
return(keep[repr][1])
}))
repr <- unlist(map(1:10, function(x){
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
return(keep[repr][1])
}))
repr
str(repr)
sig[repr]
dat$SNP_Name[repr]
cross <- read.cross(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/Howell-Cross-Object-Ratio.csv")
pdf(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/RatioSNPs.pdf")
map(repr, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP.Name[x]),
genotype.names = c("AA","BB"))
})
repr
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[x]),
genotype.names = c("AA","BB"))
map(repr, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[x]),
genotype.names = c("AA","BB"))
})
repr[1]
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[x]),
genotype.names = c("AA","BB"))
repr[2]
x
dat$SNP_Name[repr]
dev.off()
pdf(file = "RatioSNPs.pdf")
map(repr, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[x]),
genotype.names = c("AA","BB"))
})
dat$SNP_Name[repr]
x <- 1
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[x]),
genotype.names = c("AA","BB"))
x <- 2
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[x]),
genotype.names = c("AA","BB"))
x <- 3
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[x]),
genotype.names = c("AA","BB"))
x <- 4
10
map(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[repr][x]),
genotype.names = c("AA","BB"))
})
x
repr[4]
as.character(dat$SNP_Name[repr][x]
)
dev.off()
sapply(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[repr][x]),
genotype.names = c("AA","BB"))
})
dat$SNP_Name[repr]
length(dat$SNP_Name)
match(dat$SNP_Name[repr], dat$SNP_Name)
repr
sapply(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(match(dat$SNP_Name[repr],
dat$SNP_Name)[x]),
genotype.names = c("AA","BB"))
})
x
x <- 1:10
as.character(dat$SNP_Name[repr][x])
match(as.character(dat$SNP_Name[repr][x]), dat$SNP_Name)
repr
repr <- unlist(map(1:10, function(x){
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
return(keep[repr][1])
}))
repr
sapply(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[repr][x]),
genotype.names = c("AA","BB"))
})
x <- 4
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[repr][x]),
genotype.names = c("AA","BB"))
repr[4]
dat$SNP_Name[repr][4]
as.character(dat$SNP_Name[repr][4])
which(dat$SNP_Name == dat$SNP_Name[repr][4])
x <- 4
which(dat$QTL_IDvarP_fdrTPM == x)
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
dat$Variance_P_Value_F9[keep]
min(dat$Variance_P_Value_F9[keep]
)
which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
keep[repr]
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
repr
keep
keep[repr]
keep[repr][1]
repr
x <- 1
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
repr
which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
keep
x <- 4
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
kep
keep
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
repr
keep[repr]
keep[repr][1]
repr <- unlist(map(1:10, function(x){
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
return(keep[repr][1])
}))
repr
dat$SNP_Name[repr]
sapply(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[repr][x]),
genotype.names = c("AA","BB"))
})
x
as.character(dat$SNP_Name[repr])
cross <- read.cross(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/Howell-Cross-Object-Ratio.csv")
sapply(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[repr][x]),
genotype.names = c("AA","BB"))
})
repr
names <- read.csv(file = "Howell-Cross-Object-Ratio.csv")
names <- read.csv(file = "HowellvQTL_Ratio_LOD,Pvals,EffectSizes.csv")
names <- names$SNP.Name
pdf(file = "RatioSNPs.pdf")
sapply(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(names[repr][x]),
genotype.names = c("AA","BB"))
})
dev.off()
dev.cur()
x <- 1
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(names[repr][x]),
genotype.names = c("AA","BB"))
pdf(file = "RatioSNPs.pdf")
sapply(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(names[repr][x]),
genotype.names = c("AA","BB"))
})
dev.off()
sapply(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(names[repr][x]),
genotype.names = c("AA","BB"))
})
map(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(names[repr][x]),
genotype.names = c("AA","BB"))
})
pdf(file = "RatioSNPs.pdf")
map(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(names[repr][x]),
genotype.names = c("AA","BB"))
})
dev.off()
