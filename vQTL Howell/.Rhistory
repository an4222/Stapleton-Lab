collapse = ", ")), draw_ribbons = TRUE, se_line_size = 1,
point_size = 1)
{
indiv.mean.estim <- indiv.mean.lb <- indiv.mean.ub <- "fake_global_for_CRAN"
indiv.sd.estim <- indiv.sd.lb <- indiv.sd.ub <- "fake_global_for_CRAN"
group.mean.estim <- group.mean.ub <- group.mean.lb <- "fake_global_for_CRAN"
group.sd.estim <- group.sd.ub <- group.sd.lb <- "fake_global_for_CRAN"
modeling.df <- dplyr::data_frame(placeholder = rep(NA, qtl::nind(cross)))
modeling.df[[phenotype.name]] <- cross[["pheno"]][[phenotype.name]]
marker.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.geno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.geno(cross = cross))])
phen.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.pheno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.pheno(cross = cross))])
for (marker.name in marker.names) {
modeling.df[[marker.name]] <- factor(x = qtl::pull.geno(cross = cross)[,
marker.name], labels = genotype.names)
}
for (phen.name in phen.names) {
modeling.df[[phen.name]] <- factor(qtl::pull.pheno(cross = cross)[[phen.name]])
}
modeling.df[["placeholder"]] <- NULL
covar.form <- paste(focal.groups, collapse = "+")
if (!is.null(nuisance.groups)) {
covar.form <- paste(covar.form, "+", paste(nuisance.groups,
collapse = "+"))
}
mean.form <- paste(phenotype.name, "~", covar.form)
var.form <- paste("~", covar.form)
dglm.fit <- dglm::dglm(formula = stats::formula(mean.form),
dformula = stats::formula(var.form), data = modeling.df)
mean.pred <- stats::predict(dglm.fit, se.fit = TRUE)
mean.estim <- mean.pred$fit
mean.se <- mean.pred$se.fit
sd.pred <- stats::predict(dglm.fit$dispersion.fit, se.fit = TRUE)
sd.estim <- sd.pred$fit/sd.pred$residual.scale
sd.se <- sd.pred$se.fit
indiv.prediction.tbl <- dplyr::bind_cols(stats::na.omit(modeling.df),
dplyr::data_frame(indiv.mean.estim = mean.estim, indiv.mean.lb = mean.estim -
mean.se, indiv.mean.ub = mean.estim + mean.se, indiv.sd.estim = exp(sd.estim),
indiv.sd.lb = exp(sd.estim - sd.se), indiv.sd.ub = exp(sd.estim +
sd.se)))
group.prediction.tbl <- indiv.prediction.tbl %>% dplyr::group_by_(.dots = c(focal.groups)) %>%
dplyr::summarise(group.mean.estim = mean(indiv.mean.estim),
group.mean.lb = mean(indiv.mean.lb), group.mean.ub = mean(indiv.mean.ub),
group.sd.estim = mean(indiv.sd.estim), group.sd.lb = mean(indiv.sd.lb),
group.sd.ub = mean(indiv.sd.ub))
return(group.prediction.tbl)
}
rsizedf = sapply(y, function(x){
tempm =  effect.sizes(cross = random,
phenotype.name = "PlantHeight",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(tempv)
})
rsizedf <- data.frame(NULL)
y = 1:length(routv$result$loc.name)
y = y[-c(458,2482,2483)]
rsizedf = sapply(y, function(x){
tempm =  effect.sizes(cross = random,
phenotype.name = "PlantHeight",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(tempv)
})
rsizedf = sapply(y, function(x){
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(tempv)
})
class(rsizedf)
dim(rsizedf)
routvdf<- data.frame(routv$result$loc.name,
routv$result$pos,
routv$result$mean.lod,
routv$result$mean.asymp.p,
routv$result$var.lod,
routv$result$var.asymp.p,
routv$result$joint.lod,
routv$result$joint.asymp.p)
routvdf = routvdf[-c(458,2482,2483),]
dim(routvdf)
dim(rsizedf)
dim(t(rsizedf))
routvdf = cbind(routvdf,t(rsizedf))
colnames(routvdf) = c("SNP Names",
"Position (cM)",
"Mean LOD",
"Mean P Value",
"Variance LOD",
"Variance P Value",
"Joint LOD",
"Joint P Value",
"A Mean Est",
"A Mean Lower Bound",
"A Mean Upper Bound",
"A Standard Deviation Est",
"A Standard Deviation Lower Bound",
"A Standard Deviation Upper Bound",
"B Mean Est",
"B Mean Lower Bound",
"B Mean Upper Bound",
"B Standard Deviation Est",
"B Standard Deviation Lower Bound",
"B Standard Deviation Upper Bound")
pwd
getwd()
write.csv(routvdf, file = "RandomvQTL_LOD,Pvals,EffectSizes1.csv")
class(routvdf)
str(routvdf)
class(routvdf)
dim(routvdf)
length(colname(routvdf))
length(colnames(routvdf))
write.csv(routvdf, file = "RandomvQTL_LOD,Pvals,EffectSizes1.csv")
routvdf[1,]
colnames(routvdf) = c("SNP Name",
"Position (cM)",
"Mean LOD",
"Mean P Value",
"Variance LOD",
"Variance P Value",
"Joint LOD",
"Joint P Value",
"A Mean Est",
"A Mean Lower Bound",
"A Mean Upper Bound",
"A Standard Deviation Est",
"A Standard Deviation Lower Bound",
"A Standard Deviation Upper Bound",
"B Mean Est",
"B Mean Lower Bound",
"B Mean Upper Bound",
"B Standard Deviation Est",
"B Standard Deviation Lower Bound",
"B Standard Deviation Upper Bound")
class(routvdf$`A Mean Est`)
x = y[1]
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
class(tempm)
tempv = c(tempm[1,2:7],tempm[2,2:7])
class(tempv)
rsizedf = sapply(y, function(x){
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
})
routvdf<- data.frame(routv$result$loc.name,
routv$result$pos,
routv$result$mean.lod,
routv$result$mean.asymp.p,
routv$result$var.lod,
routv$result$var.asymp.p,
routv$result$joint.lod,
routv$result$joint.asymp.p)
routvdf = routvdf[-c(458,2482,2483),]
routvdf = cbind(routvdf,t(rsizedf))
colnames(routvdf) = c("SNP Name",
"Position (cM)",
"Mean LOD",
"Mean P Value",
"Variance LOD",
"Variance P Value",
"Joint LOD",
"Joint P Value",
"A Mean Est",
"A Mean Lower Bound",
"A Mean Upper Bound",
"A Standard Deviation Est",
"A Standard Deviation Lower Bound",
"A Standard Deviation Upper Bound",
"B Mean Est",
"B Mean Lower Bound",
"B Mean Upper Bound",
"B Standard Deviation Est",
"B Standard Deviation Lower Bound",
"B Standard Deviation Upper Bound")
write.csv(routvdf, file = "RandomvQTL_LOD,Pvals,EffectSizes1.csv")
routv$result$mean.asymp.p
routv$result$mean.asymp.p %>% unique()
library("qtl")
library("vqtl")
routv <- scanonevar(cross = random,
mean.formula = height.in. ~ mean.QTL.add,
var.formula = ~ var.QTL.add)
routv$result$mean.asymp.p
length(routv$result$mean.asymp.p)
debug(scanonevar)
routv <- scanonevar(cross = random,
mean.formula = height.in. ~ mean.QTL.add,
var.formula = ~ var.QTL.add)
routv <- scanonevar(cross = random,
mean.formula = height.in. ~ mean.QTL.add,
var.formula = ~ var.QTL.add)
"joint" %in% scan.types
loc.idx
nrow(result)
?scanonevar
routv <- scanonevar(cross = random,
mean.formula = height.in. ~ mean.QTL.add,
var.formula = ~ var.QTL.add)
undebug(scanonevar)
routv <- scanonevar(cross = random,
mean.formula = height.in. ~ mean.QTL.add,
var.formula = ~ var.QTL.add)
routv$result$mean.asymp.p
?scanonecar
routv <- scanonevar(cross = random,
mean.formula = height.in. ~ mean.QTL.add,
var.formula = ~ var.QTL.add)
routv <- scanonevar(cross = random,
mean.formula = height.in. ~ mean.QTL.add + mean.QTL.dom,
var.formula = ~ var.QTL.add + var.QTL.dom)
routv$result$mean.asymp.p
routvdf<- data.frame(routv$result$loc.name,
routv$result$pos,
routv$result$mean.lod,
routv$result$mean.asymp.p,
routv$result$var.lod,
routv$result$var.asymp.p,
routv$result$joint.lod,
routv$result$joint.asymp.p)
colnames(routvdf) = c("SNP Names",
"Position (cM)",
"Mean LOD",
"Mean P Value",
"Variance LOD",
"Variance P Value",
"Joint LOD",
"Joint P Value")
rsizedf = sapply(y, function(x){
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
})
dim(rsizedf)
routvdf<- data.frame(routv$result$loc.name,
routv$result$pos,
routv$result$mean.lod,
routv$result$mean.asymp.p,
routv$result$var.lod,
routv$result$var.asymp.p,
routv$result$joint.lod,
routv$result$joint.asymp.p)
routvdf = routvdf[-c(458,2482,2483),]
routvdf = cbind(routvdf,t(rsizedf))
colnames(routvdf) = c("SNP Name",
"Position (cM)",
"Mean LOD",
"Mean P Value",
"Variance LOD",
"Variance P Value",
"Joint LOD",
"Joint P Value",
"A Mean Est",
"A Mean Lower Bound",
"A Mean Upper Bound",
"A Standard Deviation Est",
"A Standard Deviation Lower Bound",
"A Standard Deviation Upper Bound",
"B Mean Est",
"B Mean Lower Bound",
"B Mean Upper Bound",
"B Standard Deviation Est",
"B Standard Deviation Lower Bound",
"B Standard Deviation Upper Bound")
write.csv(routvdf, file = "RandomvQTL_LOD,Pvals,EffectSizes1.csv")
#####Fam and Rand vQTL FINAL#####
library("qtl")
library("vqtl")
#read in data
random <-read.cross(file = url("https://raw.githubusercontent.com/tbillman/Stapleton-Lab/master/vQTL%20Random%20and%20Family/data/tidied/Random2.csv"))
random <- drop.nullmarkers(random)
#scan with variance
random <- calc.genoprob(random)
routv <- scanonevar(cross = random,
mean.formula = height.in. ~ mean.QTL.add + mean.QTL.dom,
var.formula = ~ var.QTL.add + var.QTL.dom)
#####Set up our own function to extract effect sizes from mean_var_plot function#####
library("dplyr")
effect.sizes = function (cross, phenotype.name, focal.groups = NULL, nuisance.groups = NULL,
genotype.names = c("AA", "AB", "BB"), xlim = NULL, ylim = NULL,
title = paste(phenotype.name, "by", paste(focal.groups,
collapse = ", ")), draw_ribbons = TRUE, se_line_size = 1,
point_size = 1)
{
indiv.mean.estim <- indiv.mean.lb <- indiv.mean.ub <- "fake_global_for_CRAN"
indiv.sd.estim <- indiv.sd.lb <- indiv.sd.ub <- "fake_global_for_CRAN"
group.mean.estim <- group.mean.ub <- group.mean.lb <- "fake_global_for_CRAN"
group.sd.estim <- group.sd.ub <- group.sd.lb <- "fake_global_for_CRAN"
modeling.df <- dplyr::data_frame(placeholder = rep(NA, qtl::nind(cross)))
modeling.df[[phenotype.name]] <- cross[["pheno"]][[phenotype.name]]
marker.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.geno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.geno(cross = cross))])
phen.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.pheno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.pheno(cross = cross))])
for (marker.name in marker.names) {
modeling.df[[marker.name]] <- factor(x = qtl::pull.geno(cross = cross)[,
marker.name], labels = genotype.names)
}
for (phen.name in phen.names) {
modeling.df[[phen.name]] <- factor(qtl::pull.pheno(cross = cross)[[phen.name]])
}
modeling.df[["placeholder"]] <- NULL
covar.form <- paste(focal.groups, collapse = "+")
if (!is.null(nuisance.groups)) {
covar.form <- paste(covar.form, "+", paste(nuisance.groups,
collapse = "+"))
}
mean.form <- paste(phenotype.name, "~", covar.form)
var.form <- paste("~", covar.form)
dglm.fit <- dglm::dglm(formula = stats::formula(mean.form),
dformula = stats::formula(var.form), data = modeling.df)
mean.pred <- stats::predict(dglm.fit, se.fit = TRUE)
mean.estim <- mean.pred$fit
mean.se <- mean.pred$se.fit
sd.pred <- stats::predict(dglm.fit$dispersion.fit, se.fit = TRUE)
sd.estim <- sd.pred$fit/sd.pred$residual.scale
sd.se <- sd.pred$se.fit
indiv.prediction.tbl <- dplyr::bind_cols(stats::na.omit(modeling.df),
dplyr::data_frame(indiv.mean.estim = mean.estim, indiv.mean.lb = mean.estim -
mean.se, indiv.mean.ub = mean.estim + mean.se, indiv.sd.estim = exp(sd.estim),
indiv.sd.lb = exp(sd.estim - sd.se), indiv.sd.ub = exp(sd.estim +
sd.se)))
group.prediction.tbl <- indiv.prediction.tbl %>% dplyr::group_by_(.dots = c(focal.groups)) %>%
dplyr::summarise(group.mean.estim = mean(indiv.mean.estim),
group.mean.lb = mean(indiv.mean.lb), group.mean.ub = mean(indiv.mean.ub),
group.sd.estim = mean(indiv.sd.estim), group.sd.lb = mean(indiv.sd.lb),
group.sd.ub = mean(indiv.sd.ub))
return(group.prediction.tbl)
}
#set up a vector to run the function on
y = 1:length(routv$result$loc.name)
#effect sizes can not be computed for these 3 SNPs so we remove them from the vector
y = y[-c(458,2482,2483)]
#populating a dataframe with effect size estimates
rsizedf = sapply(y, function(x){
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
})
library(qtl)
library(vqtl)
cross = read.cross(format = "csv", file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching BayesNet/ManchingScrubbed_GenoOnly.csv")
cross[['pheno']][['LowWater']] =
evf = read.csv(file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching BayesNet/ManchingScrubbed_Environment.csv")
cross[['pheno']][['LowWater']] =
evf = read.csv(file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching BayesNet/ManchingScrubbed_Environment.csv")
class(evf)
str(evf)
head(factor(evf$Low.Nitrogen))
length(factor(evf$Low.Water))
summary(cross)
-1:2
-1:-2
cross[['pheno']][['LowWater']] = factor(evf$Low.Water)[-1:-2]
cross[['pheno']][['LowNitrogen']] = factor(evf$Low.Nitrogen)[-1:-2]
cross[['pheno']][['Pathogen']] = factor(evf$Pathogen)[-1:-2]
gc()
cgp = calc.genoprob(cross = cross)
scanv = scanonevar(cross = cgp, mean.formula = Height ~LowWater + LowNitrogen + Pathogen +  mean.QTL.add ,
var.formula =  ~ LowWater + LowNitrogen + Pathogen + var.QTL.add)
gs()
gc()
scanv = scanonevar(cross = cgp, mean.formula = Height ~LowWater + LowNitrogen + Pathogen +  mean.QTL.add ,
var.formula =  ~ LowWater + LowNitrogen + Pathogen + var.QTL.add)
org <- read.table(file ="C:/Users/Thomas/Desktop/Data/Freddie1999/orig_Q11999.txt",header = FALSE, sep = "|")
dim(org)
library(parallel)
?mclapply
?scanonevar
vqtl::effects_over_genome_plot()
vqtl::effects_over_genome_plot
knitr::opts_chunk$set(echo = TRUE)
dat = read.csv(file = url("https://raw.githubusercontent.com/tbillman/Stapleton-Lab/master/Manching%20BayesNet/ManchingScrubbed.csv"))
library("bnlearn")
dat[dat$Low.Water == 1]
dat[dat$Low.Water == 1,]
dim(dat[dat$Low.Water == 1,])
mean(dat$Height)
dat$Height
mean(dat$Height)
class(dat$Height)
mean(dat$Height)[-1:-2]
which(dat$Height == NA)
dat$Height[1]
is.na(which(dat$Height == NA))
is.na(dat$Height[1]))
is.na(dat$Height[1])
is.na(dat$Height)
!is.na(dat$Height)
mean(dat$Height)[!is.na(dat$Height)]
!is.na(dat$Height)
which(!is.na(dat$Height) == T)
mean(dat$Height)[which(!is.na(dat$Height) == T)]
length(dat$Height)
unique(dat$Height)
unique(dat$Height)[3:6674]
unique(dat$Height[3:6674])
mean(dat$Height)[2:length(dat$Height)]
mean(dat$Height[2:length(dat$Height)])
mean(dat$Height[3:length(dat$Height)])
dat = dat[3:dim(dat)[1],]
mean(dat$Height)
mean(dat$Height)[which(dat$Low.Water) == 1]
mean(dat$Height)[which(dat$Low.Water == 1)]
hist(dat$Height)
unique(dat$Height)
which(dat$Height == 776)
which(dat$Height == 669)
which(dat$Height == 556)
which(dat$Height == 448)
which(dat$Height > 00)
which(dat$Height > 100)
dat$Height[1113]
dat$Height[which(dat$Height > 100)]
dat$Height[which(dat$Height > 100)] = c(48,76,69,56)
unique(dat$Height)
hist(dat$Height)
mean(dat$Height)
sd(dat$Height)
library(installr)
updateR()
library("tidyverse")
library("readr")
setwd("C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/vQTL Howell")
dat = read_csv(file = "Heat Stress.csv")
zvals = dat$taxa_NAM_RIL_ID
start = Sys.time()
gbs = read.table(file = "Howell_scrubbed_Z_to_SNPs.txt", header = TRUE, stringsAsFactors = FALSE)
timetaken = Sys.time() - start;timetaken
gbsnames = substr(as.character(gbs$Taxa),1,9)
fullnames = vector()
org  = lapply(1:length(zvals),function(x){
gbs[which(gbsnames == zvals[x]),1]
})
scrubbed = sapply(org,function(ex){
cln = gregexpr(":",ex)[[1]]
bad = c(cln[1],cln[length(cln)])
paste(substr(ex,1,bad[1]),substr(ex,bad[2]+1,nchar(as.character(ex))), sep = "")
})
used = (unlist(lapply(org, function(x){
x[1]
})))
usedLoc = sapply(1:length(used), function(x){
which(gbs$Taxa == used[x])
})
usedDat = gbs[usedLoc,]
usedDat$Taxa = substr(usedDat$Taxa, 1, 9)
precrossObj = cbind(dat[,2:3],usedDat[,-1])
precrossObj = rbind(colnames(precrossObj), precrossObj)
colnames(precrossObj) = NA
precrossObj = cbind(dat[,2:3],usedDat[,-1])
precrossObj = rbind(colnames(precrossObj), precrossObj)
colnames(precrossObj)
cn = sapply(colnames(precrossObj),function(x){
substr(x,2,nchar(x))
})
head(cn)
cn = sapply(colnames(precrossObj)[-1:-2],function(x){
substr(x,2,nchar(x))
})
head(cn)
cn = c(colnames(precrossObj)[1:2], cn)
colname(precrossObj) = NA
colname(precrossObj) = c()
colnames(precrossObj) = NA
colnames(precrossObj)
dim(precrossO)
dim(precrossObj)
precrossObj = rbind(cn,precrossObj)
class(cn)
which(cn = "300072619")
which(cn == "300072619")
which(cn == "236425156")
which(cn == "236425156") - which(cn == "300072619")
which(cn == "236425156") - which(cn == "230991943")
which(cn == "240458829") - which(cn == "230991943")
which(cn == "240458829") - which(cn == "217344001")
which(cn == "169102724") - which(cn == "217344001")
which(cn == "169102724") - which(cn == "176215993")
which(cn == "175295715") - which(cn == "176215993")
which(cn == "175295715") - which(cn == "155792919")
length(cn) - which(cn == "155792919")
chrs = c(rep(1,8554),rep(2,4900),
rep(3,4680),rep(4,4680),
rep(5,3854),rep(6,3466),
rep(7,3317),rep(8,2476),
rep(9,4202),rep(2,3378))
precrossObj = cbind(dat[,2:3],usedDat[,-1])
precrossObj = rbind(colnames(precrossObj), precrossObj)
precrossObj = rbind(cn,chrs,precrossObj)
crossobj = read.cross(precrossObj)
library("qtl")
crossobj = read.cross(precrossObj)
