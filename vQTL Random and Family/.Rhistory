})
useless = which(datasu == 1)
datas = datas[,-useless]
keep = which(complete.cases(datas) == T)
datasc = datas[keep,]
#Visualizing the NPVs
hist(datasc$NPV,breaks = 100, main = "Initial NPV Distribution", xlab = "NPVs")
# For some reason this doesn't work vector too big error
#modc = lm(NPV ~ ., datasc)
modc = lm(NPV ~ CreditScore + `MSA Code` + `MI Percentage` +
DTI + UPB + CLTV + LTV + `Interest Rate`  + `Original Term`, datasc)
summary(modc)
dim(datasc)
colnames(datasc)
summary(modc)
fin <- read.csv(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/HowellvQTL_Ratio_LOD,Pvals,EffectSizes.csv")
fin[1:6,1:6]
fin <- fin[,-1]
fin[1:6,1:6]
plot(fin$Position..cM.)
org <- read.csv(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/Howell-Cross-ObjectC3.csv")
org[1:6,1:6]
plot(fin$Position..cM.)
plot(org[2,])
plot(org[2,-c(1,2)])
par(mfrow = c(1,1))
plot(org[2,-c(1,2)])
par(mar=c(1,1,1,1))
plot(org[2,-c(1,2)])
which(is.na(org[2,]))
plot(org[2,-c(1,2)])
?plot
class(org[2,])
newdat <- org[2,]
str(newdat)
newdat<- org[2,]
newdat<- org[2,-c(1,2)]
newdat<- as.numeric(org[2,-c(1,2)])
str(newdat)
plot(newdat)
newdat
org[1:6,1:6]
org <- read_csv(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/Howell-Cross-ObjectC3.csv")
org[1:6,1:6]
library("tidyverse")
org <- read_csv(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/Howell-Cross-ObjectC3.csv")
org[1:6,1:6]
plot(org[2,-c(1,2)])
newdat<- as.numeric(org[2,-c(1,2)])
plot(newdat)
###Let's go
install.packages(c("nycflights13", "gapminder", "Lahman"))
mtcars
dput(mtcars)
###Let's go
#install.packages(c("nycflights13", "gapminder", "Lahman"))
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data =mpg)
dim(mpg)
mpg
#3.2.4 exercises
ggplot(data = mpg)
dim(mpg)
?mpg
#drv represents how the car drives, fwd rwd or 4wd
ggplot(data = mpg) +
geom_point(mapping = aes(x = hwy, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
str(mpg)
gglplot(data = mpg) +
geom_point(mapping = aes(x=displ, y = hwy, color = cty))
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y = hwy, color = cty))
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y = hwy, size = cty))
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y = hwy, shape = cty))
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y = hwy, color = cty, size = cty))
?geom_point
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y = hwy, color = displ < 5))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
str(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ cty, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
?facet_wrap
plot(fin$Position..cM.)
plot(newdat)
plot(fin$Position..cM.)
plot(newdat)
plot(fin$Position..cM.)
plot(newdat)
plot(fin$Position..cM.)
plot(newdat)
plot(fin$Position..cM.)
plot(newdat)
plot(fin$Position..cM.)
plot(newdat)
plot(fin$Position..cM.)
plot(newdat)
plot(fin$Position..cM.)
plot(newdat)
plot(fin$Position..cM.)
plot(newdat)
table(fin$Chromosome)
org[1:6,1:6]
table(org[1,])
table(as.numeric(org[1,-c(1,2)]))
table(fin$Chromosome)
plot(newdat)
plot(fin$Position..cM.)
plot(newdat)
plot(fin$Position..cM.)
plot(newdat)
length(as.numeric(org[1,-c(1m2)]))
length(as.numeric(org[1,-c(1,2)]))
length(fin$Position..cM.)
plot(newdat)
table(as.numeric(org[1,-c(1,2)]))
unique(as.numeric(org[1,-c(1,2)]))
unique(newdat)
plot(newdat)
unique(as.numeric(org[1,-c(1,2)]))
as.numeric(org[1,1000])
as.numeric(org[1,5000])
as.numeric(org[1,7000])
as.numeric(org[1,10000])
as.numeric(org[1,11000])
as.numeric(org[1,13000])
as.numeric(org[1,15000])
as.numeric(org[1,16000])
as.numeric(org[1,17000])
as.numeric(org[1,19000])
unique(as.numeric(org[1,17000:19956]))
plot(as.numeric(org[1,17000:19956]))
head(which(as.numeric(org[1,17000:19956]) == 2)
)
1447+17000
#18447-19956 on should be Chr 10 not chr 2
co1 <- read_csv(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/Howell-Cross-Object.csv")
co1[1:6,1:6]
table(co1[1,-c(1,2)])
table(as.numeric(co1[1,-c(1,2)]))
unique(newdat[1,18447:19954])
unique(newdat[18447:19954])
unique(as.numeric(newdat[18447:19954]))
unique(as.numeric(org[1,18447:19954]))
unique(as.numeric(org[1,18446:19954]))
unique(as.numeric(org[1,18445:19954]))
unique(as.numeric(org[1,18446:19956]))
unique(as.numeric(org[1,18446:19957]))
unique(as.numeric(org[1,18446:19956]))
19956-18445
org[1,18446:19956] <- 10
org[1,18446:19956]
write_csv(org,file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/Howell-Cross-ObjectC3.csv")
?write_csv
write_csv(org,path = "C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/Howell-Cross-ObjectC3.csv")
table(org[1,])
table(as.numeric(org[1,]))
table(as.numeric(org[1,-c(1,2)]))
unique(as.numeric(org[1,-c(1,2)]))
org[1:6,1:6]
org[1:2,1:2] <- ""
org[1:6,1:6]
ratio <- org[-c(1,2),1]/org[-c(1,2),2]
unique(org[-c(1,2),1])
ratio <- as.numeric(org[-c(1,2),1])/as.numeric(org[-c(1,2),2])
as.numeric(org[-c(1,2),1])
str(org[,1])
numeric(org[-c(1,2),1])
?numeric
str(org[-c(1,2),1])
as.numeric(org[-c(1,2),1])
as.vector(org[-c(1,2),1])
str(as.vector(org[-c(1,2),1]))
as.numeric(as.vector(org[-c(1,2),1]))
map(org[-1:-2,1])
map(org[-1:-2,1], as.numeric)
unsp <0 map(org[-1:-2,1], as.numeric)
unsp <- map(org[-1:-2,1], as.numeric)
unsp
unlist(unsp)
ratio <- unlist(map(org[-1:-2,1]))/unlist(map(org[-1:-2,2]))
ratio <- unlist(map(org[-1:-2,1], as.numeric))/unlist(map(org[-1:-2,2], as.numeric))
ratio
names(ratio) <- c()
ratio
org[-1:-2,2] <- ratio
org[1:6,1:6]
org <- org[,-1]
colnames(org)[2] <- "Ratio"
org[1:6,1:6]
org <- read_csv(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/Howell-Cross-ObjectC3.csv")
org[1,18446:19956] <- 10
org[1:2,1:2] <- ""
ratio <- unlist(map(org[-1:-2,1], as.numeric))/unlist(map(org[-1:-2,2], as.numeric))
names(ratio) <- c()
org[-1:-2,2] <- ratio
org <- org[,-1]
colnames(org)[1] <- "Ratio"
org[1:6,1:6]
write_csv(org,path = "C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/Howell-Cross-Object-Ratio.csv")
dat <- read.csv(file = "C://Users/Thomas/Documents/Github/StapletonLab/Manching\ BayesNet/ManchingScrubbed.csv")
dat <- read.csv(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/Manching\ BayesNet/ManchingScrubbed.csv")
dat[1:6,1:6]
library(tidyverse)
apply(dat[,2:4],2,as.factor)
str(dat[,2])
dat[,2:4] <- apply(dat[,2:4],2,as.factor)
str(dat[,2])
dat <- read.csv(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/Manching\ BayesNet/ManchingScrubbed.csv")
for (x in 2:4){
dat[,x] <<- as.factor(dat[,x])
}
x
dat[,x]
for (x in 2:4){
dat[,x] <<- as.factor(dat[,x])
}
dat <- read.csv(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/Manching\ BayesNet/ManchingScrubbed.csv")
dat[1:6,1:6]
for (x in 2:4){
dat[,x] <<- as.factor(dat[,x])
}
as.factor(dat[,2])
environment()
dat[1:6,1:6]
mod <- lm(Height ~ Low.Water + Low.Nitrogen + Pathogen, data = dat)
summary(mod)
rnorm()
rnorm(n = 1)
?rnorm
rnorm(n = 1, mean = 69.09, sd = 17.87)
fin <- read.csv(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/HowellvQTL_Ratio_LOD,Pvals,EffectSizes.csv")
fin <- fin[,-1]
fin[1:6,1:6]
plot(fin$Position..cM.)
?map
summary(mod)
min(dat$Height)
min(dat$Height[which(is.numeric(dat$Height) == 1)])
min(dat$Height[-1:-2])
hist(dat$Height[-1:-2])
max(dat$Height[-1:-2])
which(dat$Height[-1:-2] == 776)
max(dat$Height[c(-1,-2,2533)])
max(dat$Height[c(-1,-2,-2533)])
max(dat$Height[-c(1,2,2533)])
max(dat$Height[-c(1,2,2535)])
776/12
100/12
dat <- read.csv(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/Manching\ BayesNet/ManchingScrubbed.csv")
dat[1:6,1:6]
as.factor(dat[,2])
mod <- lm(Height ~ Low.Water + Low.Nitrogen + Pathogen, data = dat)
summary(mod)
min(dat$Height[-1:-2])
max(dat$Height[-1:-2])
hist(dat$Height[-1:-2])
hist(dat$Height[-1:-2], breaks = 50)
summary(mod)
plot(aov(mod))
hist(dat$Height[-1:-2], breaks = 50)
hist(log(dat$Height[-1:-2]), breaks = 50)
hist(exp(dat$Height[-1:-2]), breaks = 50)
?ep
?exp
hist(exp(dat$Height[-1:-2]), breaks = 50)
hist((dat$Height[-1:-2])^1.2, breaks = 50)
hist((dat$Height[-1:-2])^1.3, breaks = 50)
hist(dat$Height[-1:-2], breaks = 50)
table(dat$Height[-1:-2])
summary(mod)
dat <- read.csv(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/Manching\ BayesNet/ManchingScrubbed.csv")
dat[1:6,1:6]
as.factor(dat[,2])
mod <- lm(Height ~ Low.Water + Low.Nitrogen + Pathogen, data = dat)
summary(mod)
#install.packages("vqtl")
#install.packages("qtl")
library("qtl")
library("vqtl")
#we also got rid of "(" in SNP ID rz44bd and rz574bc
setwd("C:/Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Random\ and\ Family/")
random <-read.cross(file = "data/tidied/Random2.csv")
random <- drop.nullmarkers(random)
#scan with variance
random <- calc.genoprob(random)
routv <- scanonevar(cross = random,
mean.formula = height.in. ~ mean.QTL.add + mean.QTL.dom,
var.formula = ~ var.QTL.add + var.QTL.dom)
plot(routv)
library("dplyr")
effect.sizes = function (cross, phenotype.name, focal.groups = NULL, nuisance.groups = NULL,
genotype.names = c("AA", "AB", "BB"), xlim = NULL, ylim = NULL,
title = paste(phenotype.name, "by", paste(focal.groups,
collapse = ", ")), draw_ribbons = TRUE, se_line_size = 1,
point_size = 1)
{
indiv.mean.estim <- indiv.mean.lb <- indiv.mean.ub <- "fake_global_for_CRAN"
indiv.sd.estim <- indiv.sd.lb <- indiv.sd.ub <- "fake_global_for_CRAN"
group.mean.estim <- group.mean.ub <- group.mean.lb <- "fake_global_for_CRAN"
group.sd.estim <- group.sd.ub <- group.sd.lb <- "fake_global_for_CRAN"
modeling.df <- dplyr::data_frame(placeholder = rep(NA, qtl::nind(cross)))
modeling.df[[phenotype.name]] <- cross[["pheno"]][[phenotype.name]]
marker.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.geno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.geno(cross = cross))])
phen.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.pheno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.pheno(cross = cross))])
for (marker.name in marker.names) {
modeling.df[[marker.name]] <- factor(x = qtl::pull.geno(cross = cross)[,
marker.name], labels = genotype.names)
}
for (phen.name in phen.names) {
modeling.df[[phen.name]] <- factor(qtl::pull.pheno(cross = cross)[[phen.name]])
}
modeling.df[["placeholder"]] <- NULL
covar.form <- paste(focal.groups, collapse = "+")
if (!is.null(nuisance.groups)) {
covar.form <- paste(covar.form, "+", paste(nuisance.groups,
collapse = "+"))
}
mean.form <- paste(phenotype.name, "~", covar.form)
var.form <- paste("~", covar.form)
dglm.fit <- dglm::dglm(formula = stats::formula(mean.form),
dformula = stats::formula(var.form), data = modeling.df)
mean.pred <- stats::predict(dglm.fit, se.fit = TRUE)
mean.estim <- mean.pred$fit
mean.se <- mean.pred$se.fit
sd.pred <- stats::predict(dglm.fit$dispersion.fit, se.fit = TRUE)
sd.estim <- sd.pred$fit/sd.pred$residual.scale
sd.se <- sd.pred$se.fit
indiv.prediction.tbl <- dplyr::bind_cols(stats::na.omit(modeling.df),
dplyr::data_frame(indiv.mean.estim = mean.estim, indiv.mean.lb = mean.estim -
mean.se, indiv.mean.ub = mean.estim + mean.se, indiv.sd.estim = exp(sd.estim),
indiv.sd.lb = exp(sd.estim - sd.se), indiv.sd.ub = exp(sd.estim +
sd.se)))
group.prediction.tbl <- indiv.prediction.tbl %>% dplyr::group_by_(.dots = c(focal.groups)) %>%
dplyr::summarise(group.mean.estim = mean(indiv.mean.estim),
group.mean.lb = mean(indiv.mean.lb), group.mean.ub = mean(indiv.mean.ub),
group.sd.estim = mean(indiv.sd.estim), group.sd.lb = mean(indiv.sd.lb),
group.sd.ub = mean(indiv.sd.ub))
return(group.prediction.tbl)
}
y = 1:length(routv$result$loc.name)
#effect sizes can not be computed for these 3 SNPs
rsizedf = sapply(y, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
}
)
})
?match
kt <- read.csv(file = "C://Users/Thomas/Documents/Stapleton-Lab/Manching\ BayesNet/SNPData.csv")
kt <- read.csv(file = "C:\Users\Thomas\Documents\GitHub\Stapleton-Lab\Manching BayesNetSNPData.csv")
kt <- read.csv(file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching\ BayesNet/SNPData.csv")
ndat <- read.csv(file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching\ BayesNet/newData.csv")
dat <- read.csv(file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching\ BayesNet/ManchingScrubbed.csv")
match(kt$SNP.Name, dat[1,-c(1:4)])
head(kt$SNP.Name)
head(as.character(kt$SNP.Name))
head(as.character(dat[1,-c(1,4)]))
head(as.character(dat[1,-c(1:4)]))
head(as.character(colnames(dat[-c(1:4)])))
match(as.character(kt$SNP.Name), as.character(colnames(dat[-c(1:4)])))
key <- match(as.character(kt$SNP.Name), as.character(colnames(dat[-c(1:4)])))
head(as.character(kt$SNP.Name)[key])
head(as.character(colnames(dat[-c(1:4)])))
sum(is.na(as.character(colnames(dat[-c(1:4)]))))
sum(which(is.na(as.character(colnames(dat[-c(1:4)])))))
head(as.character(colnames(dat[-c(1:4)])))
length(ke)
length(key)
head(as.character(kt$SNP.Name[key]))
head(as.character(colnames(dat[key])))
head(as.character(colnames(dat)[key])))
head(as.character(colnames(dat)[key]))
head(as.character(kt$SNP.Name))
key <- match(as.character(colnames(dat[-c(1:4)])), as.character(kt$SNP.Name))
key
as.character(colnames(dat[-c(1:4)]))[key]
as.character(kt$SNP.Name)[key]
head(as.character(kt$SNP.Name)[key])
keep <- as.character(kt$SNP.Name)[key]
which(is.na(keep))
which(is.na(keep)) + 4
which(!is.na(keep)) + 4
gcol <- which(!is.na(keep)) + 4
gcol <- c(1:4,gcol)
gdat <- dat[,gcol]
gdat[1:6,1:6]
head(ndat[,1])
dim(gdat)
dim(ndat)
ndat <- read.csv(file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching\ BayesNet/newData.csv")
key <- match(as.character(colnames(dat[-c(1:4)])), as.character(kt$SNP.Name))
keep <- as.character(kt$SNP.Name)[key]
gcol <- which(!is.na(keep)) + 4
gcol <- c(1:4,gcol)
gdat <- dat[,gcol]
gdat[-1:-2,1] <-
dim(gdat)
dim(ndat)
gdat[-1:-2,1] <- ndat$Height
kt <- read.csv(file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching\ BayesNet/SNPData.csv")
ndat <- read.csv(file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching\ BayesNet/newData.csv")
dat <- read.csv(file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching\ BayesNet/ManchingScrubbed.csv")
key <- match(as.character(colnames(dat[-c(1:4)])), as.character(kt$SNP.Name))
keep <- as.character(kt$SNP.Name)[key]
gcol <- which(!is.na(keep)) + 4
gcol <- c(1:4,gcol)
gdat <- dat
gdat[-1:-2,1] <- ndat$Height
colnames(gdat[,gcol])
#making a key with sorted NPV names and column numbers
key <- match(as.character(colnames(dat[-c(1:4)])), as.character(kt$SNP.Name))
keep <- as.character(kt$SNP.Name)[key]
gcol <- which(!is.na(keep)) + 4
gnames <- colnames(gdat[,gcol])
length(gnames)
length(gcol)
length(keep)
which(!is.na(key))
length(which(!is.na(key)))
head(colnames(dat))
#making a key with sorted NPV names and column numbers
key <- match(as.character(colnames(dat)[-c(1:4)]), as.character(kt$SNP.Name))
length(which(!is.na(key)))
keep <- as.character(kt$SNP.Name)[key]
gcol <- which(!is.na(keep)) + 4
gnames <- colnames(gdat[,gcol])
as.character(colnames(dat)[-c(1:4)])
as.character(kt$SNP.Name)
length(kt$SNP.Name)
#making a key with sorted NPV names and column numbers
key <- match(as.character(colnames(dat)[-c(1:4)]), as.character(kt$SNP.Name), nomatch = NULL)
key
#making a key with sorted NPV names and column numbers
key <- match(as.character(colnames(dat)[-c(1:4)]), as.character(kt$SNP.Name))
length(!is.na(key))
length(which(!is.na(key)))
length(kt$SNP.Name)
length(colnames(dat)[-c(1:4)])
#making a key with sorted NPV names and column numbers
key <- match(as.character(colnames(dat)[-c(1:4)]), as.character(kt$SNP.Name))
key
length(which(!is.na(key)))
which(is.na(key))
data.frame(gnames,gcol)
colnames(gdf) <- c("SNP Name","SNP Column")
gdf <- data.frame(gnames,gcol)
colnames(gdf) <- c("SNP Name","SNP Column")
head(gdf)
write.csv(file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching\ BayesNet/SimulatedKTSNPs.csv")
write.csv
?write.csv
write.csv(gdf, file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching\ BayesNet/SimulatedKTSNPs.csv",
row.names = F)
write.csv(gdat, file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
#vQTL with simulated data
dat <- read.csv(file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
library("vqtl")
#vQTL with simulated data
library("qtl")
library("vqtl")
dat <- read.cross(file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
dat <- drop.nullmarkers(dat)
#scan with variance
dat <- calc.genoprob(dat)
#scan with variance
dat <- calc.genoprob(dat)
?scanonevar
