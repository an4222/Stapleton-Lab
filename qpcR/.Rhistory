#Generating Known-Truth Logistic Curves
#Altering LogCurveGeneration to be selfcontained
#parameters
upper<-10
mid<-6
steep<-1
randc<-.08
numrep<- 20
#defined curve function
curve<- function(upper,mid,steep, randc){
#Generating signal
#Making x values from -6*steepness+mid to 6*steepness+mid
x<-c(mid+(1/steep)*(-6:6))
#signal from the logistic model
sig<- function(x,steep = 1, mid = 3, upper = 3) {
upper/(1+exp(-steep*(x-mid)))
}
#generating y values
#signal
signal<-c(sig(x,steep, mid, upper))
plot(x,signal)
#Generating noise
noiseval<-sapply(signal, function(signal) rnorm(n = 1,mean = 0,sd = signal*randc))
plot(x,noiseval)
#Adding noise and signal to produce stochastic curve
y<-c(signal+noiseval)
plot(x,y)
#preparing column names
curvesdf<- data.frame(x,y)
return(curvesdf)
}
#base case set up
curvesdf<-curve(upper,mid,steep,randc)
curveset<-curvesdf
i=2
#recursion for upper number of trials
for(i in 2:numrep){
i<- i+1
curvesdf<- curve(upper,mid,steep,randc)
curveset <- cbind(curveset, curvesdf[,2])
j=1
colnames(curveset)<- "Cycle"
for (j in 2:i) {
colnames(curveset)[j] <-paste("Fluorescense", j-1)
}
}
#final data
print(curveset)
library(qpcR)
curveseta<-curveset
curvesetamod<- modlist(curveseta, cyc = 1, fluo = c(2:21), model = l5)
curvesetaKOD<- KOD(curvesetamod, method = "uni1", plot = TRUE)
is.outlier(curvesetaKOD)
curvesetafit<-pcrfit(curveseta, cyc = 1, fluo = c(2:21), model = l5)
curvesetafit<-pcrfit(curveseta, cyc = 1, fluo = c(2:21), model = l5)
curvesetafit<-pcrfit(curveseta, cyc = 1, fluo = c(2:21), model = l5)
?pcrfit
pcrfit(curveset, cyc = 1 , fluo = 2:21, model = l5)
ucnhl4<-pcrfit(ucnh, 2, 6, l4)
ucnh<- read.csv(file="UCN-QH.csv", header = TRUE, sep = ",") # as above but hex data
ucnhl4<-pcrfit(ucnh, 2, 6, l4)
pcrGOF(ucnhl4)
plot(ucnhl4)
mlist<-modlist(reps, 1, 2:5, l5, weights= "1/error^2")
KODlist<- KOD(mlist, method = "uni1")
is.outlier(KODlist)
m2 <- pcrfit(reps, 1, 2:5, l5, weights = "1/error^2")
pcrGOF(m2)
plot(m2)
print(reps)
curvesetamod<- modlist(curveseta, cyc = 1, fluo = c(2:21), model = l5, weights = "1/error^2")
curvesetaKOD<- KOD(curvesetamod, method = "uni1", plot = TRUE)
is.outlier(curvesetaKOD)
curvesetafit<-pcrfit(curveseta, cyc = 1, fluo = c(2:21), model = l5, weights = "1/error^2")
plot(curvesetafit)
pcrfit(curveset, 1, 2:12, l5, weights = "1/error^2")
print(curveset)
dim.data.frame(curveset)
plot(curveset, x = [,1]. y = [,2:21])
plot(data = curveset, x = [,1]. y = [,2:21])
plot(curveset[,1], curveset[,2:21])
plot(curveset)
