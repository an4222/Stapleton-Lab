setwd("C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/vQTL Howell")
#####now to run the small scale analysis#####
crossobj = read.cross(format = "csv", file = "Howell-Cross-ObjectC3.csv")
crossframec = read_csv("Howell-Cross-ObjectC1.csv")
ranc = sample(3:ncol(crossframec),500)
##getting rid of redundant columns
tablec = read_csv("Howell-Cross-ObjectC2.csv")
unq = sapply(3:ncol(tablec),function(x){
print(x)
dim(unique(tablec[3:134,x]))[1]
})
length(which(unq == 3))
keep = which(unq == 3)
tablecc = tablec[,c(1,2,(keep+2))]
tablecc[1:2,1:2] = ""
write_csv(tablecc[,c(1,2,ranc)], "Howell-Cross-ObjectC3-Sample.csv",
row.names = F, col.names = T)
write_csv(tablecc[,c(1,2,ranc)], "Howell-Cross-ObjectC3-Sample.csv")
write_table(tablecc[,c(1,2,ranc)], "Howell-Cross-ObjectC3-Sample.csv",
row.names = F, col.names = T, sep = ",")
write.table(tablecc[,c(1,2,ranc)], "Howell-Cross-ObjectC3-Sample.csv",
, row.names = F,col.names = T, sep = ",")
ranc = sample(3:ncol(tablecc),500)
write.table(tablecc[,c(1,2,ranc)], "Howell-Cross-ObjectC3-Sample.csv",
, row.names = F,col.names = T, sep = ",")
#####now to run the small scale analysis#####
crossobj = read.cross(format = "csv", file = "Howell-Cross-ObjectC3-Sample.csv")
crossobj = drop.nullmarkers(crossobj)
crossobj <- calc.genoprob(crossobj)
outv <- scanonevar(cross = crossobj,
mean.formula = Un.Spliced.bZIP60 ~ mean.QTL.add,
var.formula = ~ var.QTL.add)
#####Set up our own function to extract effect sizes from mean_var_plot function#####
library("dplyr")
effect.sizes = function (cross, phenotype.name, focal.groups = NULL, nuisance.groups = NULL,
genotype.names = c("AA", "AB", "BB"), xlim = NULL, ylim = NULL,
title = paste(phenotype.name, "by", paste(focal.groups,
collapse = ", ")), draw_ribbons = TRUE, se_line_size = 1,
point_size = 1)
{
indiv.mean.estim <- indiv.mean.lb <- indiv.mean.ub <- "fake_global_for_CRAN"
indiv.sd.estim <- indiv.sd.lb <- indiv.sd.ub <- "fake_global_for_CRAN"
group.mean.estim <- group.mean.ub <- group.mean.lb <- "fake_global_for_CRAN"
group.sd.estim <- group.sd.ub <- group.sd.lb <- "fake_global_for_CRAN"
modeling.df <- dplyr::data_frame(placeholder = rep(NA, qtl::nind(cross)))
modeling.df[[phenotype.name]] <- cross[["pheno"]][[phenotype.name]]
marker.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.geno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.geno(cross = cross))])
phen.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.pheno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.pheno(cross = cross))])
for (marker.name in marker.names) {
modeling.df[[marker.name]] <- factor(x = qtl::pull.geno(cross = cross)[,
marker.name], labels = genotype.names)
}
for (phen.name in phen.names) {
modeling.df[[phen.name]] <- factor(qtl::pull.pheno(cross = cross)[[phen.name]])
}
modeling.df[["placeholder"]] <- NULL
covar.form <- paste(focal.groups, collapse = "+")
if (!is.null(nuisance.groups)) {
covar.form <- paste(covar.form, "+", paste(nuisance.groups,
collapse = "+"))
}
mean.form <- paste(phenotype.name, "~", covar.form)
var.form <- paste("~", covar.form)
dglm.fit <- dglm::dglm(formula = stats::formula(mean.form),
dformula = stats::formula(var.form), data = modeling.df)
mean.pred <- stats::predict(dglm.fit, se.fit = TRUE)
mean.estim <- mean.pred$fit
mean.se <- mean.pred$se.fit
sd.pred <- stats::predict(dglm.fit$dispersion.fit, se.fit = TRUE)
sd.estim <- sd.pred$fit/sd.pred$residual.scale
sd.se <- sd.pred$se.fit
indiv.prediction.tbl <- dplyr::bind_cols(stats::na.omit(modeling.df),
dplyr::data_frame(indiv.mean.estim = mean.estim, indiv.mean.lb = mean.estim -
mean.se, indiv.mean.ub = mean.estim + mean.se, indiv.sd.estim = exp(sd.estim),
indiv.sd.lb = exp(sd.estim - sd.se), indiv.sd.ub = exp(sd.estim +
sd.se)))
group.prediction.tbl <- indiv.prediction.tbl %>% dplyr::group_by_(.dots = c(focal.groups)) %>%
dplyr::summarise(group.mean.estim = mean(indiv.mean.estim),
group.mean.lb = mean(indiv.mean.lb), group.mean.ub = mean(indiv.mean.ub),
group.sd.estim = mean(indiv.sd.estim), group.sd.lb = mean(indiv.sd.lb),
group.sd.ub = mean(indiv.sd.ub))
return(group.prediction.tbl)
}
#set up a vector to run the function on
y = 1:length(outv$result$loc.name)
#populating a dataframe with effect size estimates
sizedf = sapply(y, function(x){
tempm =  effect.sizes(cross = crossobj,
phenotype.name = "height.in.",
genotype.names = ngeno,
focal.groups = outv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
})
#populating a dataframe with effect size estimates
sizedf = sapply(y, function(x){
tempm =  effect.sizes(cross = crossobj,
phenotype.name = "height.in.",
genotype.names = c("A","B"),
focal.groups = outv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
})
formula
terms.formula(formula)
terms.formula(formula, data = data)
data
terms.formula()
terms.formula
#populating a dataframe with effect size estimates
sizedf = sapply(y, function(x){
tempm =  effect.sizes(cross = crossobj,
phenotype.name = "height.in.",
focal.groups = outv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
})
labels
#populating a dataframe with effect size estimates
sizedf = sapply(y, function(x){
tempm =  effect.sizes(cross = crossobj,
phenotype.name = "Un.Spliced.bZIP60",
genotype.names = c("A","B"),
focal.groups = outv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
})
x = 1
tempm =  effect.sizes(cross = crossobj,
phenotype.name = "Un.Spliced.bZIP60",
genotype.names = c("A","B"),
focal.groups = outv$result$loc.name[x])
x
terms(x)
?terms
terms
stats::terms
stats::terms.formula
outv$result$loc.name[x[]
outv$result$loc.name[x[]]
outv$result$loc.name[x
outv$result$loc.name[x]
class(outv$result$loc.name[x])
terms(Un.Spliced.bZIP60 ~ outv$result$loc.name[1])
x = outv$result$loc.name[1]
x
terms(Un.Spliced.bZIP60 ~ "2039827")
terms(Un.Spliced.bZIP60 ~ 2039827)
terms(Un.Spliced.bZIP60 ~ Marker2039827)
head(colnames(tablecc))
sapply(3:ncol(tablecc), function(x){
colnames(tablecc)[x] <<- paste("Marker",colnames(tablecc)[x])
})
tablec = read_csv("Howell-Cross-ObjectC2.csv")
unq = sapply(3:ncol(tablec),function(x){
print(x)
dim(unique(tablec[3:134,x]))[1]
})
length(which(unq == 3))
keep = which(unq == 3)
tablecc = tablec[,c(1,2,(keep+2))]
tablecc[1:2,1:2] = ""
ranc = sample(3:ncol(tablecc),500)
sapply(3:ncol(tablecc), function(x){
colnames(tablecc)[x] <<- paste("Marker",colnames(tablecc)[x], sep = "")
print(x)
})
write.table(tablecc[,c(1,2,ranc)], "Howell-Cross-ObjectC3-Sample.csv",
, row.names = F,col.names = T, sep = ",")
write.table(tablecc[,c(1,2,ranc)], "Howell-Cross-ObjectC3-Sample.csv",
, row.names = F,col.names = T, sep = ",")
write_csv(tablecc, "Howell-Cross-ObjectC3.csv")
#####now to run the small scale analysis#####
crossobj = read.cross(format = "csv", file = "Howell-Cross-ObjectC3-Sample.csv")
crossobj = drop.nullmarkers(crossobj)
crossobj <- calc.genoprob(crossobj)
outv <- scanonevar(cross = crossobj,
mean.formula = Un.Spliced.bZIP60 ~ mean.QTL.add,
var.formula = ~ var.QTL.add)
#####Set up our own function to extract effect sizes from mean_var_plot function#####
library("dplyr")
effect.sizes = function (cross, phenotype.name, focal.groups = NULL, nuisance.groups = NULL,
genotype.names = c("AA", "AB", "BB"), xlim = NULL, ylim = NULL,
title = paste(phenotype.name, "by", paste(focal.groups,
collapse = ", ")), draw_ribbons = TRUE, se_line_size = 1,
point_size = 1)
{
indiv.mean.estim <- indiv.mean.lb <- indiv.mean.ub <- "fake_global_for_CRAN"
indiv.sd.estim <- indiv.sd.lb <- indiv.sd.ub <- "fake_global_for_CRAN"
group.mean.estim <- group.mean.ub <- group.mean.lb <- "fake_global_for_CRAN"
group.sd.estim <- group.sd.ub <- group.sd.lb <- "fake_global_for_CRAN"
modeling.df <- dplyr::data_frame(placeholder = rep(NA, qtl::nind(cross)))
modeling.df[[phenotype.name]] <- cross[["pheno"]][[phenotype.name]]
marker.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.geno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.geno(cross = cross))])
phen.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.pheno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.pheno(cross = cross))])
for (marker.name in marker.names) {
modeling.df[[marker.name]] <- factor(x = qtl::pull.geno(cross = cross)[,
marker.name], labels = genotype.names)
}
for (phen.name in phen.names) {
modeling.df[[phen.name]] <- factor(qtl::pull.pheno(cross = cross)[[phen.name]])
}
modeling.df[["placeholder"]] <- NULL
covar.form <- paste(focal.groups, collapse = "+")
if (!is.null(nuisance.groups)) {
covar.form <- paste(covar.form, "+", paste(nuisance.groups,
collapse = "+"))
}
mean.form <- paste(phenotype.name, "~", covar.form)
var.form <- paste("~", covar.form)
dglm.fit <- dglm::dglm(formula = stats::formula(mean.form),
dformula = stats::formula(var.form), data = modeling.df)
mean.pred <- stats::predict(dglm.fit, se.fit = TRUE)
mean.estim <- mean.pred$fit
mean.se <- mean.pred$se.fit
sd.pred <- stats::predict(dglm.fit$dispersion.fit, se.fit = TRUE)
sd.estim <- sd.pred$fit/sd.pred$residual.scale
sd.se <- sd.pred$se.fit
indiv.prediction.tbl <- dplyr::bind_cols(stats::na.omit(modeling.df),
dplyr::data_frame(indiv.mean.estim = mean.estim, indiv.mean.lb = mean.estim -
mean.se, indiv.mean.ub = mean.estim + mean.se, indiv.sd.estim = exp(sd.estim),
indiv.sd.lb = exp(sd.estim - sd.se), indiv.sd.ub = exp(sd.estim +
sd.se)))
group.prediction.tbl <- indiv.prediction.tbl %>% dplyr::group_by_(.dots = c(focal.groups)) %>%
dplyr::summarise(group.mean.estim = mean(indiv.mean.estim),
group.mean.lb = mean(indiv.mean.lb), group.mean.ub = mean(indiv.mean.ub),
group.sd.estim = mean(indiv.sd.estim), group.sd.lb = mean(indiv.sd.lb),
group.sd.ub = mean(indiv.sd.ub))
return(group.prediction.tbl)
}
#set up a vector to run the function on
y = 1:length(outv$result$loc.name)
#populating a dataframe with effect size estimates
sizedf = sapply(y, function(x){
tempm =  effect.sizes(cross = crossobj,
phenotype.name = "Un.Spliced.bZIP60",
genotype.names = c("A","B"),
focal.groups = outv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
})
#gathering data from the initial scan
outvdf<- data.frame(outv$result$loc.name,
outv$result$pos,
outv$result$mean.lod,
outv$result$mean.asymp.p,
outv$result$var.lod,
outv$result$var.asymp.p,
outv$result$joint.lod,
outv$result$joint.asymp.p)
#combining both
outvdf = cbind(outvdf,t(sizedf))
colnames(outvdf) = c("SNP Name",
"Position (cM)",
"Mean LOD",
"Mean P Value",
"Variance LOD",
"Variance P Value",
"Joint LOD",
"Joint P Value",
"A Mean Est",
"A Mean Lower Bound",
"A Mean Upper Bound",
"A Standard Deviation Est",
"A Standard Deviation Lower Bound",
"A Standard Deviation Upper Bound",
"B Mean Est",
"B Mean Lower Bound",
"B Mean Upper Bound",
"B Standard Deviation Est",
"B Standard Deviation Lower Bound",
"B Standard Deviation Upper Bound")
write.csv(outvdf, file = "HowellvQTL_Sample_LOD,Pvals,EffectSizes.csv")
x = 1
tempm =  effect.sizes(cross = crossobj,
phenotype.name = "Un.Spliced.bZIP60",
genotype.names = c("A","B"),
focal.groups = outv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
unlist(tempv)
tempm
outv$result$mean.asymp.p[1]
unique(outv$result$mean.asymp.p)
outv$result$mean.asymp.p
plot(outv)
outv <- scanonevar.perm(cross = crossobj, n.perms = 10
mean.formula = Un.Spliced.bZIP60 ~ mean.QTL.add,
var.formula = ~ var.QTL.add)
outv <- scanonevar.perm(cross = crossobj, n.perms = 10,
mean.formula = Un.Spliced.bZIP60 ~ mean.QTL.add,
var.formula = ~ var.QTL.add)
outvp <- scanonevar.parm(outv, n.perms = 10)
outvp <- scanonevar.perm(outv, n.perms = 10)
library("parallel")
detectCores()
outvp <- scanonevar.perm(outv, n.perms = 3, n.cores = 3)
tempm$Marker2336532
tempm$group.mean.estim
tempm$group.sd.estim
outv$result$mean.asymp.p
vqtl::scanonevar()
vqtl::scanonevar
?scanonevar
getAnywhere(scanonevar_)
loc.idx = 1
outv$result$mean.lod[1]
mean.df
debug(scanonevar)
outv <- scanonevar(cross = crossobj,
mean.formula = Un.Spliced.bZIP60 ~ mean.QTL.add,
var.formula = ~ var.QTL.add)
mean.df
loc.idx
all(this.loc.modeling.df[["mean.QTL.dom"]] == 0
)
this.loc.mean.df
outv <- scanonevar(cross = crossobj,
mean.formula = Un.Spliced.bZIP60 ~ mean.QTL.add,
var.formula = ~ var.QTL.add)
x
pattern
scan.formulae$mean.alt.formula
this.loc.modeling.df[["mean.QTL.dom"]] == 0
this.loc.modeling.df[["mean.QTL.dom"]]
this.loc.modeling.df[["mean.QTL.dom"]] == 0
all(this.loc.modeling.df[["mean.QTL.dom"]] == 0)
outv <- scanonevar(cross = crossobj,
mean.formula = Un.Spliced.bZIP60 ~ mean.QTL.add + mean.QTL.dom,
var.formula = ~ var.QTL.add + var.QTL.dom)
undebug(scanonevar)
outv <- scanonevar(cross = crossobj,
mean.formula = Un.Spliced.bZIP60 ~ mean.QTL.add + mean.QTL.dom,
var.formula = ~ var.QTL.add + var.QTL.dom)
#####Set up our own function to extract effect sizes from mean_var_plot function#####
library("dplyr")
effect.sizes = function (cross, phenotype.name, focal.groups = NULL, nuisance.groups = NULL,
genotype.names = c("AA", "AB", "BB"), xlim = NULL, ylim = NULL,
title = paste(phenotype.name, "by", paste(focal.groups,
collapse = ", ")), draw_ribbons = TRUE, se_line_size = 1,
point_size = 1)
{
indiv.mean.estim <- indiv.mean.lb <- indiv.mean.ub <- "fake_global_for_CRAN"
indiv.sd.estim <- indiv.sd.lb <- indiv.sd.ub <- "fake_global_for_CRAN"
group.mean.estim <- group.mean.ub <- group.mean.lb <- "fake_global_for_CRAN"
group.sd.estim <- group.sd.ub <- group.sd.lb <- "fake_global_for_CRAN"
modeling.df <- dplyr::data_frame(placeholder = rep(NA, qtl::nind(cross)))
modeling.df[[phenotype.name]] <- cross[["pheno"]][[phenotype.name]]
marker.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.geno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.geno(cross = cross))])
phen.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.pheno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.pheno(cross = cross))])
for (marker.name in marker.names) {
modeling.df[[marker.name]] <- factor(x = qtl::pull.geno(cross = cross)[,
marker.name], labels = genotype.names)
}
for (phen.name in phen.names) {
modeling.df[[phen.name]] <- factor(qtl::pull.pheno(cross = cross)[[phen.name]])
}
modeling.df[["placeholder"]] <- NULL
covar.form <- paste(focal.groups, collapse = "+")
if (!is.null(nuisance.groups)) {
covar.form <- paste(covar.form, "+", paste(nuisance.groups,
collapse = "+"))
}
mean.form <- paste(phenotype.name, "~", covar.form)
var.form <- paste("~", covar.form)
dglm.fit <- dglm::dglm(formula = stats::formula(mean.form),
dformula = stats::formula(var.form), data = modeling.df)
mean.pred <- stats::predict(dglm.fit, se.fit = TRUE)
mean.estim <- mean.pred$fit
mean.se <- mean.pred$se.fit
sd.pred <- stats::predict(dglm.fit$dispersion.fit, se.fit = TRUE)
sd.estim <- sd.pred$fit/sd.pred$residual.scale
sd.se <- sd.pred$se.fit
indiv.prediction.tbl <- dplyr::bind_cols(stats::na.omit(modeling.df),
dplyr::data_frame(indiv.mean.estim = mean.estim, indiv.mean.lb = mean.estim -
mean.se, indiv.mean.ub = mean.estim + mean.se, indiv.sd.estim = exp(sd.estim),
indiv.sd.lb = exp(sd.estim - sd.se), indiv.sd.ub = exp(sd.estim +
sd.se)))
group.prediction.tbl <- indiv.prediction.tbl %>% dplyr::group_by_(.dots = c(focal.groups)) %>%
dplyr::summarise(group.mean.estim = mean(indiv.mean.estim),
group.mean.lb = mean(indiv.mean.lb), group.mean.ub = mean(indiv.mean.ub),
group.sd.estim = mean(indiv.sd.estim), group.sd.lb = mean(indiv.sd.lb),
group.sd.ub = mean(indiv.sd.ub))
return(group.prediction.tbl)
}
#set up a vector to run the function on
y = 1:length(outv$result$loc.name)
#populating a dataframe with effect size estimates
sizedf = sapply(y, function(x){
tempm =  effect.sizes(cross = crossobj,
phenotype.name = "Un.Spliced.bZIP60",
genotype.names = c("A","B"),
focal.groups = outv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
})
head(outv$result$mean.asymp.p)
#gathering data from the initial scan
outvdf<- data.frame(outv$result$loc.name,
outv$result$pos,
outv$result$mean.lod,
outv$result$mean.asymp.p,
outv$result$var.lod,
outv$result$var.asymp.p,
outv$result$joint.lod,
outv$result$joint.asymp.p)
#combining both
outvdf = cbind(outvdf,t(sizedf))
colnames(outvdf) = c("SNP Name",
"Position (cM)",
"Mean LOD",
"Mean P Value",
"Variance LOD",
"Variance P Value",
"Joint LOD",
"Joint P Value",
"A Mean Est",
"A Mean Lower Bound",
"A Mean Upper Bound",
"A Standard Deviation Est",
"A Standard Deviation Lower Bound",
"A Standard Deviation Upper Bound",
"B Mean Est",
"B Mean Lower Bound",
"B Mean Upper Bound",
"B Standard Deviation Est",
"B Standard Deviation Lower Bound",
"B Standard Deviation Upper Bound")
write.csv(outvdf, file = "HowellvQTL_Sample_LOD,Pvals,EffectSizes.csv")
length(y)
dim(sizedf)
dim(outvdf)
outv$result$mean.asymp.p[500]
x = 500
tempm =  effect.sizes(cross = crossobj,
phenotype.name = "Un.Spliced.bZIP60",
genotype.names = c("A","B"),
focal.groups = outv$result$loc.name[x])
tampm
tempm
tempv = c(tempm[1,2:7],tempm[2,2:7])
unlist(tempv)
outvdf$`A Mean Est`[5000]
outvdf$`A Mean Est`[5000=]
outvdf$`A Mean Est`[500]
#gathering data from the initial scan
outvdf<- data.frame(outv$result$loc.name,
outv$result$pos,
outv$result$mean.lod,
outv$result$mean.asymp.p,
outv$result$var.lod,
outv$result$var.asymp.p,
outv$result$joint.lod,
outv$result$joint.asymp.p)
#combining both
outvdf = cbind(outvdf,t(sizedf))
colnames(outvdf) = c("SNP Name",
"Position (cM)",
"Mean LOD",
"Mean P Value",
"Variance LOD",
"Variance P Value",
"Joint LOD",
"Joint P Value",
"A Mean Est",
"A Mean Lower Bound",
"A Mean Upper Bound",
"A Standard Deviation Est",
"A Standard Deviation Lower Bound",
"A Standard Deviation Upper Bound",
"B Mean Est",
"B Mean Lower Bound",
"B Mean Upper Bound",
"B Standard Deviation Est",
"B Standard Deviation Lower Bound",
"B Standard Deviation Upper Bound")
write.csv(outvdf, file = "HowellvQTL_Sample_LOD,Pvals,EffectSizes.csv")
x = 126
tempm =  effect.sizes(cross = crossobj,
phenotype.name = "Un.Spliced.bZIP60",
genotype.names = c("A","B"),
focal.groups = outv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
tempv
outv$result$mean.lod[126]
outv <- scanonevar(cross = crossobj,
mean.formula = Un.Spliced.bZIP60 ~ mean.QTL.add + mean.QTL.dom,
var.formula = ~ var.QTL.add + var.QTL.dom)
outv$result$mean.lod[126]
#####Multiple Stress vQTL#####
#to be run in stampede2
library(tidyverse)
library(qtl);
library(vqtl);
setwd("C:/Users/Thomas/Documents/Github/Stapleton-Lab/Manching BayesNet")
cross = read.cross(format = "csv", file = "ManchingScrubbed_GenoOnly.csv");
cross = drop.nullmarkers(cross);
evf = read_csv(file = "ManchingScrubbed_Environment.csv");
cross[['pheno']][['LowWater']] = factor(evf$`Low Water`[-1:-2]);
cross[['pheno']][['LowNitrogen']] = factor(evf$`Low Nitrogen`[-1:-2]);
cross[['pheno']][['Pathogen']] = factor(evf$Pathogen[-1:-2]);
gc();
cgp = calc.genoprob(cross = cross);
gc();
scanv = scanonevar(cross = cgp, mean.formula = Height ~ LowWater + LowNitrogen + Pathogen +  mean.QTL.add ,
var.formula =  ~ LowWater + LowNitrogen + Pathogen + var.QTL.add);
1+1
